{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 wangEditor —— 轻量级 web 富文本编辑器，配置方便，使用简单。 官网：www.wangEditor.com 文档：www.wangEditor.com/doc 源码：github.com/wangeditor-team/wangEditor （欢迎 star） 基本使用 npm 安装 npm i wangeditor --save ，几行代码即可创建一个编辑器 import E from 'wangeditor' const editor = new E('#div1') editor.create() 交流 加入 QQ 群 164999061（人已满） 710646022 提交 bug 或建议 github issues 提交问题 开发人员 （列出所有开发人员） 王福朋 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-03 13:44:38 "},"get-start.html":{"url":"get-start.html","title":"开始使用","keywords":"","body":"下载 npm 安装 npm i wangeditor --save CDN 链接 https://unpkg.com/wangeditor/dist/wangEditor.min.js 基本使用 使用 js 外链引入 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() 使用 npm 安装 import E from 'wangeditor' const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() 修改编辑区域高度 编辑区域高度默认是 300px ，可自行修改。 editor.$textContainerElem.css('height', '600px') 菜单和编辑器区域分离 如果你想要像 知乎专栏、简书、石墨、网易云笔记 这些编辑页面一样，将编辑区域和菜单分离，也可以实现。 这样，菜单和编辑器区域就是使用者可自己控制的元素，可自定义样式。例如：将菜单fixed、编辑器区域高度自动增加等。 .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container 和 toolbar 分开 ------ 我是分割线 ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // 传入两个元素 editor.create() 从上面代码可以看出，菜单和编辑区域其实就是两个单独的 ，位置、尺寸都可以随便定义。 使用 textarea wangEditor 从 v3 版本开始不支持 textarea ，但是可以通过 onchange 来实现 textarea 中提交富文本内容。 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // 第二步，监控变化，同步更新到 textarea $text1.val(html) } editor.create() // 第一步，初始化 textarea 的值 $text1.val(editor.txt.html()) 一个页面创建多个编辑器 wangEditor 支持一个页面创建多个编辑器。 .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } 中间隔离带 第一个 demo（菜单和编辑器区域分开） 第二个 demo（常规） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-03 14:50:59 "},"content.html":{"url":"content.html","title":"内容处理","keywords":"","body":"设置内容 以下方式中，如果条件允许，尽量使用第一种方式，效率最高。 html 初始化内容 直接将内容写到要创建编辑器的 标签中。 初始化的内容 初始化的内容 const E = window.wangEditor const editor = new E('#div1') editor.create() js 设置内容 创建编辑器之后，使用 editor.txt.html(...) 设置编辑器内容。 const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('用 JS 设置的内容') // 重新设置编辑器内容 追加内容 创建编辑器之后，可使用 editor.txt.append('追加的内容') 继续追加内容。 获取内容 获取 html 使用 editor.txt.html() 获取 html 。 需要注意的是：从编辑器中获取的 html 代码是不包含任何样式的纯 html，如果显示的时候需要对其中的 等标签进行自定义样式（这样既可实现多皮肤功能），下面提供了编辑器中使用的样式供参考。 /* table 样式 */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote 样式 */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code 样式 */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol 样式 */ ul, ol { margin: 10px 0 10px 20px; } 获取 text 使用 editor.txt.text() 获取 text 文本。 获取 JSON 使用 editor.txt.getJSON() 获取 JSON 格式的内容。格式如 [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"欢迎使用 \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \" 富文本编辑器\" ] }, { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ], \"children\": [] }, ] 清空内容 可使用 editor.txt.clear() 清空编辑器内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-03 14:51:08 "},"menu-conf.html":{"url":"menu-conf.html","title":"配置菜单","keywords":"","body":"自定义菜单栏 【注意】v3 版本开始，菜单不支持换行折叠了（因为换行之后菜单栏是在太难看），如果菜单栏宽度不够，建议精简菜单项。 配置菜单 编辑器创建之前，可使用 editor.config.menus 定义显示哪些菜单和菜单的顺序。 欢迎使用 wangEditor 编辑器 const E = window.wangEditor const editor = new E('#div1') // 配置菜单栏，删减菜单，调整顺序 editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() 所有菜单 默认情况下会显示所有的菜单，配置如下： // 默认情况下，显示所有菜单 editor.config.menus = [ // 待补充 ] 配置颜色 编辑器的字体颜色和背景色，可以通过 editor.config.colors 自定义配置 const E = window.wangEditor const editor = new E('#div1') // 配置颜色（文字颜色、背景色） editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() 配置字体 编辑器的字体，可以通过 editor.config.fontNames 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置字体 editor.config.fontNames = [ '黑体', '仿宋', '楷体', '标楷体', '华文仿宋', '华文楷体', '宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() 配置字号 待补充。 包括 customFontSize 和 fontSize 的区别 插入代码 需要引入 highlight.js 其他描述待补充。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 11:08:10 "},"callbacks.html":{"url":"callbacks.html","title":"回调函数","keywords":"","body":"onchange 配置 onchange 回调函数 配置 onchange 函数之后，用户操作（鼠标点击、键盘打字等）导致的内容变化之后，会自动触发 onchange 函数执行。 如果需要修改 onchange 触发的延迟时间（ onchange 会在用户无任何操作的 xxx 毫秒之后被触发），可通过 onchangeTimeout 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置 onchange 回调函数 editor.config.onchange = function (newHtml) { console.log('change 之后最新的 html', newHtml) } // 配置触发 onchange 的时间频率，默认为 200ms editor.config.onchangeTimeout = 500 // 修改为 500ms editor.create() 有些情况无法触发 onchange 事件 如用户自己用 js 修改了 DOM 节点的内容，没有通过编辑器修改内容，则不会触发编辑器的 onchange 。 此时可以主动执行 editor.change() 来触发 onchange 回调函数。 onfocus 和 onblur 编辑区域 focus（聚焦）和 blur（失焦）时触发的回调函数。 const E = window.wangEditor const editor = new E('#div1') editor.config.onblur = function (newHtml) { console.log('onblur', newHtml) // 获取最新的 html 内容 } editor.config.onfocus = function (newHtml) { console.log('onfocus', newHtml) // 获取最新的 html 内容 } editor.create() 插入网络图片的回调事件 const E = window.wangEditor const editor = new E('#div1') // 插入网络图片的回调 editor.config.linkImgCallback = function (src) { console.log('图片 src ', src) } editor.create() 删除图片的回调事件 待补充 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 11:37:56 "},"insert-check.html":{"url":"insert-check.html","title":"插入内容校验","keywords":"","body":"插入链接的校验 待补充 插入网络图片的校验 待补充 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 11:49:04 "},"paste.html":{"url":"paste.html","title":"粘贴过滤","keywords":"","body":"关闭粘贴样式的过滤 从其他地方（如网页、word 等）复制文本到编辑器中，编辑器会默认过滤掉复制文本的样式，这样可以让编辑器内容更加简洁。因为复制过来的文本样式，可能会比较混乱，且不可控。 可通过设置 editor.config.pasteFilterStyle = false 来关闭样式过滤。 忽略粘贴内容中的图片 从其他页面（如网页、word 等）复制过来的内容，除了包含文字还可能包含图片，这些图片一般都是外域的（可能会有防盗链处理，导致图片不显示）。 可以通过配置 editor.config.pasteIgnoreImg = true 来忽略粘贴的图片。如果复制的内容有图又文，则只粘贴文字，不粘贴图片。 自定义处理粘贴的文本内容 使用者可通过 editor.config.pasteTextHandle 对粘贴的文本内容进行自定义的过滤、处理等操作，然后返回处理之后的文本内容。编辑器最终会粘贴用户处理之后并且返回的的内容。 const E = window.wangEditor const editor = new E('#div1') // 配置粘贴文本的内容处理 editor.config.pasteTextHandle = function (pasteStr) { // 对粘贴的文本进行处理，然后返回处理后的结果 return pasteStr + '巴拉巴拉' } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 13:49:24 "},"upload-img.html":{"url":"upload-img.html","title":"上传图片","keywords":"","body":"上传图片到服务器 【注意】如果上传图片遇到问题，请打开浏览器开发者工具，查看 console.error 输出的错误信息。 配置 server 接口 const E = window.wangEditor const editor = new E('#div1') // 配置 server 接口地址 editor.config.uploadImgServer = '/upload-img' editor.create() 配置完成之后，编辑器的图片菜单，会显示上传图片的 tab 和图标，如下图。 server 接口返回格式，重要！！！ 接口要返回 application/json 格式，格式要求如下： { // errno 即错误代码，0 表示没有错误。 // 如果有错误，errno != 0，可通过下文中的监听函数 fail 拿到该错误码进行自定义处理 \"errno\": 0, // data 是一个数组，返回图片的线上地址 \"data\": [ \"图片1地址\", \"图片2地址\", \"……\" ] } 只要按照上述格式返回，编辑器即可正确的插入图片，或者抛出错误。 限制图片大小 默认限制图片大小是 5M ，可以自己修改。 editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 2M 限制一次最多能传几张图片 默认为 100 张，需要限制可自己配置。 editor.config.uploadImgMaxLength = 5 // 一次最多上传 5 个图片 自定义上传参数 上传图片时可自定义传递一些参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。 editor.config.uploadImgParams = { token: 'xxxxx', x: 100 } 如果需要将参数拼接到 url 中，可再加上如下配置。 editor.customConfig.uploadImgParamsWithUrl = true 自定义 fileName 上传图片时，可自定义 filename ，即在使用 formData.append(name, file) 添加图片文件时，自定义第一个参数。 editor.config.uploadFileName = 'your-custom-fileName' 自定义 header 上传图片时添加 http 请求的 header 。 editor.config.uploadImgHeaders = { Accept: 'text/x-json', a: 100, } withCredentials（跨域传递 cookie） 跨域上传中如果需要传递 cookie 需设置 withCredentials 。 editor.config.withCredentials = true 自定义 timeout 时间 timeout 即上传接口等待的最大时间，默认是 10 秒钟，可以自己修改。 editor.config.uploadImgTimeout = 5 * 1000 回调函数 可使用回调函数，对上传图片的不同阶段，做相应处理。代码示例如下。 editor.config.uploadImgHooks = { // 上传图片之前 before(xhr) { console.log(xhr) // 可阻止图片上传 return { prevent: true, msg: '需要提示给用户的错误信息' } } // 图片上传并返回了结果，图片插入已成功 success(xhr) { console.log('success', xhr) } // 图片上传并返回了结果，但图片插入时出错了 fail(xhr, editor, resData) { console.log('fail', resData) } // 上传图片出错，一般为 http 请求的错误 error(xhr, editor, resData) { console.log('error', xhr, resData) } // 上传图片超时 timeout(xhr) { console.log('timeout') } // 图片上传并返回了结果，想要自己把图片插入到编辑器中 // 例如服务器端返回的不是 { errno: 0, data: [...] } 这种格式，可使用 customInsert customInsert(insertImgFn, result) { // result 即服务端返回的接口 console.log('customInsert', result) // insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可 insertImgFn(result.data[0]) } } 自定义 alert 上传图片的错误提示默认使用 alert 弹出，你也可以自定义用户体验更好的提示方式。 editor.config.customAlert = function (s) { console.log('customAlert: ' + s) } 自己写上传图片 如果想完全自己实现图片上传的过程，如上传图片到某个云服务器，可以使用如下代码。 editor.config.customUploadImg = function (resultFiles, insertImgFn) { // resultFiles 是 input 中选中的文件列表 // insertImgFn 是获取图片 url 后，插入到编辑器的方法 // 上传图片，返回结果，将图片插入到编辑器中 insertImgFn(imgUrl) } base64 保存图片 设置 editor.config.uploadImgShowBase64 = true 可使用 base64 格式保存图片。即，可选择本地图片，编辑器用 base64 格式显示图片。 【注意】uploadImgShowBase64（base64 格式）和 uploadImgServer（上传图片到服务器）两者不能同时使用！！！ 隐藏插入网络图片的功能 设置 editor.config.showLinkImg = false 即可隐藏插入网络图片的功能，即只保留上传本地图片。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 14:44:37 "},"API.html":{"url":"API.html","title":"常用 API","keywords":"","body":"editor 属性 编辑器唯一的 id editor.id 编辑器的所有配置 editor.config 编辑区域 DOM 节点 editor.$textElem.elems[0] ，元素 id editor.textElemId 菜单栏 DOM 节点 editor.$toolbarElem.elems[0] ，元素 id editor.toolbarElemId 选区范围 API 选中的文字 editor.selection.getSelectionText() 选区所在的 DOM 节点 editor.selection.getSelectionContainerElem().elems[0] 选区开始的 DOM 节点 editor.selection.getSelectionStartElem().elems[0] 选区结束的 DOM 节点 editor.selection.getSelectionEndElem().elems[0] 折叠选区 editor.selection.collapseRange() 判断选区是否为“空”（即没有选中任何文字）editor.selection.isSelectionEmpty() 内容操作 API 常规的内容操作参考 内容处理 在光标位置插入文字 editor.cmd.do('insertHTML', '...') 可通过 editor.cmd.do(name, value) 来执行 document.execCommand(name, false, value) 的操作（document.execCommand 是富文本编辑器的基础 API ，文档参考 这里） 禁用编辑器 // 禁用编辑功能 editor.$textElem.attr('contenteditable', false) // 开启编辑功能 editor.$textElem.attr('contenteditable', true) 销毁编辑器 待编写 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 15:09:47 "},"vue-react.html":{"url":"vue-react.html","title":"用于 Vue 和 React","keywords":"","body":"用于 vue 和 React Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 14:47:33 "},"ts.html":{"url":"ts.html","title":"使用 typescript","keywords":"","body":"用于 ts Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-04 15:12:24 "},"custom-menu.html":{"url":"custom-menu.html","title":"扩展菜单","keywords":"","body":"自定义菜单 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-03 14:56:39 "},"i18n.html":{"url":"i18n.html","title":"多语言","keywords":"","body":"多语言 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-03 14:52:33 "}}