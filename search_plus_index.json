{"./":{"url":"./","title":"Introduction","keywords":"","body":"介绍 English documentation wangEditor —— 轻量级 web 富文本编辑器，配置方便，使用简单。 官网：www.wangEditor.com 文档：doc.wangEditor.com 源码：github.com/wangeditor-team/wangEditor （欢迎 star） （如想继续使用 V3 版本，可参考这里） demo 在线体验 demo 可到 codepen.io/collection/DNmPQV 。 注意，如果打不开，可以去查看 github examples 的源码。 浏览器兼容性 兼容常见的 PC 浏览器：Chrome，Firefox，Safari，Edge，QQ 浏览器，IE11。 不支持移动端。 基本使用 NPM npm i wangeditor --save 安装后几行代码即可创建一个编辑器： import E from \"wangeditor\" const editor = new E(\"#div1\") editor.create() CDN const E = window.wangEditor const editor = new E(\"#div1\") // 或者 const editor = new E(document.getElementById('div1')) editor.create() 更多使用方法，可参考开始使用，或者看左侧目录。 交流 加入 QQ 群 164999061（人已满） 710646022（人已满） 901247714 提交 bug 或建议 github issues 提交问题 贡献代码 欢迎非团队成员贡献代码，提交 Pull Request，请一定参考 贡献代码流程。 开发人员 王福朋 - wangEditor 创始人，资深前端工程师，PMP，曾就职于百度、滴滴 太阳 - 佛系前端工程师~ 刘威 - 我已经想到了一个完美实现 execCommand api 的方法可是这里太小写不下。 童汉 - 星火世传 奋飞不辍 李春淋 - 只要不放弃努力和追求，小草也有点缀春天价值。 郑温剑 - 放弃很容易，但是坚持会更酷。 方智聪 - 翠林 张超 bella 罗超 - 天才就是百分之一的灵感加上百分之九十九的努力。 haha 李宁 - 一切皆有可能。 饶思羚 颜彪 - 大家好，我是二号男嘉宾，我的交友宣言是爱我爱我爱我把，选我选我选我吧 刘庆华(火热) - 热爱着，年轻着 李晨 顾乾峰 - 一条喜欢撸码也喜欢打游戏的咸鱼，是真努力还是假努力，时间会检验一切！ 郑越冕 想加入 wangEditor 研发团队，可申请加入 QQ 群，然后私聊群主。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/":{"url":"pages/01-开始使用/","title":"开始使用","keywords":"","body":"开始使用 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/01-基本使用.html":{"url":"pages/01-开始使用/01-基本使用.html","title":"基本使用","keywords":"","body":"基本使用 下载 npm 安装 npm i wangeditor --save CDN 链接 https://cdn.jsdelivr.net/npm/wangeditor@latest/dist/wangEditor.min.js 使用 js 外链引入 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() 使用 npm 安装 import E from 'wangeditor' const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/02-设置高度.html":{"url":"pages/01-开始使用/02-设置高度.html","title":"设置高度","keywords":"","body":"设置编辑区域的高度 编辑区域高度默认为 300px ，可通过以下方式修改。 const editor = new E('#div1') // 设置编辑区域高度为 500px editor.config.height = 500 // 注意，先配置 height ，再执行 create() editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/03-菜单和编辑区域分离.html":{"url":"pages/01-开始使用/03-菜单和编辑区域分离.html","title":"菜单和编辑区域分离","keywords":"","body":"菜单和编辑区域分离 如果你想要像 知乎专栏、简书、石墨、网易云笔记 这些编辑页面一样，将编辑区域和菜单分离，也可以实现。 这样，菜单和编辑器区域就是使用者可自己控制的元素，可自定义样式。例如：将菜单fixed、编辑器区域高度自动增加等。 .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container 和 toolbar 分开 ------ 我是分割线 ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // 传入两个元素 editor.create() 从上面代码可以看出，菜单和编辑区域其实就是两个单独的 ，位置、尺寸都可以随便定义。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/04-使用textarea.html":{"url":"pages/01-开始使用/04-使用textarea.html","title":"使用Textarea","keywords":"","body":"使用 textarea wangEditor 从 v3 版本开始不支持 textarea ，但是可以通过 onchange 来实现 textarea 中提交富文本内容。 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // 第二步，监控变化，同步更新到 textarea $text1.val(html) } editor.create() // 第一步，初始化 textarea 的值 $text1.val(editor.txt.html()) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/05-一个页面多个编辑器.html":{"url":"pages/01-开始使用/05-一个页面多个编辑器.html","title":"一个页面多个编辑器","keywords":"","body":"一个页面多个编辑器 wangEditor 支持一个页面创建多个编辑器。 .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } 中间隔离带 第一个 demo（菜单和编辑器区域分开） 第二个 demo（常规） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/06-zIndex.html":{"url":"pages/01-开始使用/06-zIndex.html","title":"ZIndex","keywords":"","body":"配置 z-index 编辑器 z-index 默认为 10000，可以自行调整。 注意：z-index值需要>=0 const editor = new E('#div1') editor.config.zIndex = 500 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/07-placeholder.html":{"url":"pages/01-开始使用/07-placeholder.html","title":"Placeholder","keywords":"","body":"placeholder 可以修改 placeholder 的提示文字。 const editor = new E('#div1') editor.config.placeholder = '自定义 placeholder 提示文字' // editor.config.placeholder = '' // 不想使用 placeholder ，赋值为空字符串即可 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/08-自动focus.html":{"url":"pages/01-开始使用/08-自动focus.html","title":"自动Focus","keywords":"","body":"自动 focus 编辑器初始化时，默认会自动 focus 到编辑区域。可通过如下操作，取消自动 focus 。 const editor = new E('#div1') // 取消自动 focus editor.config.focus = false editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/09-自定义 alert.html":{"url":"pages/01-开始使用/09-自定义 alert.html","title":"自定义 Alert","keywords":"","body":"自定义 alert 编辑器 customAlert 是对全局的alert做了统一处理，默认为 window.alert。 如觉得浏览器自带的alert体验不佳，可自定义 alert，以便于达到与自身项目统一的alert效果。 import { message } from 'antd'; const editor = new E('#div1') // 以 Ant Design 为例 editor.config.customAlert = function (s, t) { switch (t) { case 'success': message.success(s) break case 'info': message.info(s) break case 'warning': message.warning(s) break case 'error': message.error(s) break default: message.info(s) break } } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/01-开始使用/99-使用V3版本.html":{"url":"pages/01-开始使用/99-使用V3版本.html","title":"使用V3版本","keywords":"","body":"使用V3版本 尽量升级使用 V4 版本。平滑升级，成本很低。 V3 版本以后将不再维护， V4 和 V3 的配置和使用极为相似（把 editor.customConfig 改为 editor.config 即可） 如确实没法升级，不得已继续使用 V3，可参考 下载和安装 CDN https://unpkg.com/wangeditor@3.1.1/release/wangEditor.min.js 文件 https://github.com/wangfupeng1988/wangEditor/releases/tag/v3.1.1 npm npm i wangeditor@3.1.1 文档 https://www.kancloud.cn/wangfupeng/wangeditor3/332599 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/":{"url":"pages/02-内容处理/","title":"内容处理","keywords":"","body":"内容处理 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/01-设置内容.html":{"url":"pages/02-内容处理/01-设置内容.html","title":"设置内容","keywords":"","body":"设置内容 以下方式中，如果条件允许，尽量使用第一种方式，效率最高。 html 初始化内容 直接将内容写到要创建编辑器的 标签中。 初始化的内容 初始化的内容 const E = window.wangEditor const editor = new E('#div1') editor.create() js 设置内容 创建编辑器之后，使用 editor.txt.html(...) 设置编辑器内容。 const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('用 JS 设置的内容') // 重新设置编辑器内容 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/02-追加新内容.html":{"url":"pages/02-内容处理/02-追加新内容.html","title":"追加新内容","keywords":"","body":"追加新内容 创建编辑器之后，可使用 editor.txt.append('追加的内容') 继续追加内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/03-获取html.html":{"url":"pages/02-内容处理/03-获取html.html","title":"获取Html","keywords":"","body":"获取 html 使用 editor.txt.html() 获取 html 。 需要注意的是：从编辑器中获取的 html 代码是不包含任何样式的纯 html，如果显示的时候需要对其中的 等标签进行自定义样式（这样既可实现多皮肤功能），下面提供了编辑器中使用的样式供参考。 /* table 样式 */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote 样式 */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code 样式 */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol 样式 */ ul, ol { margin: 10px 0 10px 20px; } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/04-获取text.html":{"url":"pages/02-内容处理/04-获取text.html","title":"获取Text","keywords":"","body":"获取 text 使用 editor.txt.text() 获取 text 文本。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/05-获取和设置JSON.html":{"url":"pages/02-内容处理/05-获取和设置JSON.html","title":"获取和设置JSON","keywords":"","body":"获取/设置 JSON 获取 JSON 使用 editor.txt.getJSON() 获取 JSON 格式的内容，格式如下。 [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"欢迎使用 \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \" 富文本编辑器\" ] }, { \"tag\": \"p\", \"attrs\": [], \"children\": [ { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ] } ] } ] 设置 JSON 使用 editor.txt.setJSON([...]) ，传入上述的 JSON 格式，可设置内容。 注意，setJSON 从 v4.3.0 版本开始支持。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/06-清空内容.html":{"url":"pages/02-内容处理/06-清空内容.html","title":"清空内容","keywords":"","body":"清空内容 可使用 editor.txt.clear() 清空编辑器内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/02-内容处理/07-配置历史记录.html":{"url":"pages/02-内容处理/07-配置历史记录.html","title":"配置历史记录","keywords":"","body":"配置历史记录 当前历史记录存在两种模式，标准模式（主流浏览器）和兼容模式（IE 和 旧版 Edge）,我们可以通过 editor.config.compatibleMode 这个属性来配置当前的历史记录模式，你也可以使用 historyMaxSize 来自定义你的记录步数。 当我们使用兼容模式的时候，如果需要修改记录的延迟时间（用户无操作 xxx 毫秒后进行记录），可通过 onchangeTimeout 配置。 const E = window.wangEditor const editor = new E(\"#div1\") // 默认情况下，只有 IE 和 旧版 Edge 会使用兼容模式，如果需要在其它浏览器上也使用兼容模式，可以在函数内进行判定 editor.config.compatibleMode = function () { // 返回 true 表示使用兼容模式；返回 false 使用标准模式 return true } // 当我们使用兼容模式的时候，可以自定义记录的频率，默认 200 ms editor.config.onchangeTimeout = 500 // 修改为 500 ms // 还可以修改历史记录的步数。默认 30 步 editor.config.historyMaxSize = 50 // 修改为 50 步 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/":{"url":"pages/03-配置菜单/","title":"配置菜单","keywords":"","body":"配置菜单 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/01-自定义菜单.html":{"url":"pages/03-配置菜单/01-自定义菜单.html","title":"自定义菜单","keywords":"","body":"自定义菜单 配置菜单 编辑器创建之前 editor.config.menus 使用 editor.config.menus 定义显示哪些菜单和菜单的顺序。 欢迎使用 wangEditor 编辑器 const E = window.wangEditor const editor = new E('#div1') // 配置菜单栏，删减菜单，调整顺序 editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() editor.config.excludeMenus 使用 editor.config.excludeMenus 当只需剔除少数菜单的时候，直接设置不需要的菜单 欢迎使用 wangEditor 编辑器 const E = window.wangEditor const editor = new E('#div1') // 配置菜单栏，设置不需要的菜单 editor.config.excludeMenus = [ 'emoticon', 'video' ] editor.create() 【注意】不要同时使用 editor.config.menus 和 editor.config.excludeMenus，以免引起冲突和混乱。 所有菜单 默认情况下会显示所有的菜单，配置如下： // 默认情况下，显示所有菜单 editor.config.menus = [ 'head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'indent', 'lineHeight', 'foreColor', 'backColor', 'link', 'list', 'todo', 'justify', 'quote', 'emoticon', 'image', 'video', 'table', 'code', 'splitLine', 'undo', 'redo', ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/02-配置颜色.html":{"url":"pages/03-配置菜单/02-配置颜色.html","title":"配置颜色","keywords":"","body":"配置颜色 编辑器的字体颜色和背景色，可以通过 editor.config.colors 自定义配置 const E = window.wangEditor const editor = new E('#div1') // 配置颜色（文字颜色、背景色） editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/03-配置字体.html":{"url":"pages/03-配置菜单/03-配置字体.html","title":"配置字体","keywords":"","body":"配置字体 编辑器的字体，可以通过 editor.config.fontNames 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置字体 editor.config.fontNames = [ '黑体', '仿宋', '楷体', '标楷体', '华文仿宋', '华文楷体', '宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/04-配置字号.html":{"url":"pages/03-配置菜单/04-配置字号.html","title":"配置字号","keywords":"","body":"配置字号 编辑器的字号，可以通过 editor.config.fontSizes 配置。 const E = window.wangEditor const editor = new E('#div1') editor.config.fontSizes = { 'x-small': { name: '10px', value: '1' }, 'small': { name: '13px', value: '2' }, 'normal': { name: '16px', value: '3' }, 'large': { name: '18px', value: '4' }, 'x-large': { name: '24px', value: '5' }, 'xx-large': { name: '32px', value: '6' }, 'xxx-large': { name: '48px', value: '7' }, } editor.create() 【特别注意】上述配置中 key 的值（即 x-small small normal 等这些）不可改变，key 不可增加，只能减少。 value: '1 - 7' 也不可改变，也不可增加，只能减少。而且，value 和 key 必须对应起来，例如 small 就必须对应 2 因此，上述配置中，你只能修改 name 。但修改之后，不会生效，还需要做一些调整。 以 'large': { name: '18px', value: '4' } 这个举例。 编辑器设置这个 font-size ，会生成 ... 。所以，你还需要增加下面的 css 代，让 size=\"4\" 对应到 font-size: 18px; 。 font[size=\"4\"] { font-size: 18px; } 编辑器页面需要该 css ，回显页面也需要该 css 。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/05-配置行高.html":{"url":"pages/03-配置菜单/05-配置行高.html","title":"配置行高","keywords":"","body":"配置行高 编辑器的行高，可以通过 editor.config.lineHeights 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置行高 editor.config.lineHeights = ['1', '1.15', '1.6', '2', '2.5', '3'] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/06-配置表情图标.html":{"url":"pages/03-配置菜单/06-配置表情图标.html","title":"配置表情图标","keywords":"","body":"配置表情图标 通过 editor.config.emotions 可配置表情图标。表情菜单的 panel 中，支持多 tab 。 const SINA_URL_PATH = 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal' const E = window.wangEditor const editor = new E('#div1') editor.config.emotions = [ { title: '新浪', // tab 的标题 type: 'image', // 'emoji' 或 'image' ，即 emoji 形式或者图片形式 content: [ { alt: '[坏笑]', src: `${SINA_URL_PATH}/50/pcmoren_huaixiao_org.png` }, { alt: '[舔屏]', src: `${SINA_URL_PATH}/40/pcmoren_tian_org.png` }, { alt: '[污]', src: `${SINA_URL_PATH}/3c/pcmoren_wu_org.png` }, ] }, { title: 'emoji', // tab 的标题 type: 'emoji', // 'emoji' / 'image' // emoji 表情，content 是一个数组即可 content: '&#x1F600; &#x1F603; &#x1F604; &#x1F601; &#x1F606; &#x1F605; &#x1F602; &#x1F60A; &#x1F607; &#x1F642; &#x1F643; &#x1F609; &#x1F613; &#x1F62A; &#x1F634; &#x1F644; &#x1F914; &#x1F62C; &#x1F910;'.split(/\\s/), } ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/07-代码高亮.html":{"url":"pages/03-配置菜单/07-代码高亮.html","title":"代码高亮","keywords":"","body":"代码高亮 wangEditoor中的\"插入代码\"菜单模块, 支持通过引入 highlight js 插件实现代码高亮的样式功能.并且提供多种样式支持. 编辑器默认不带有 highlight, 您需要手动安装高亮插件. highlight js官网: https://highlightjs.org 安装 highlight npm 方式 npm install highlight.js -S CDN 引入 挂载 highlight 1.获取highlight实例 import hljs from 'highlight.js' (cdn引入,highlight 实例 \"hljs\"会声明到window下, 直接调用即可) 挂载设置代码如下 const E = window.wangEditor const editor = new E('#div1') // 挂载highlight插件 editor.highlight = hljs editor.create() 2.css的引入 npm方式 import 'highlight.js/styles/monokai-sublime.css' CDN引入 完成以上所有步骤之后, 再次使用wangEditor中的 插入代码 功能, 就能够有高亮效果了, 如图所示 显示内容 当您在读取文本数据作展示时, 展示页面需要引入highlight插件的样式 (安装方式与富文本页面引入highlight相同,不再赘述) 更多highlight使用方法, 请参考highlight.js官方手册 插入代码的配置项 1.languageType languageType字段为插入代码时, select框的选项值, 我们以为您默认填写了大部分语言类型, 如您还有更多需求,可以对此字段的数组进行修改. //插入代码语言配置 editor.config.languageType = [ 'Bash', 'C', 'C#', 'C++', 'CSS', 'Java', 'JavaScript', 'JSON', 'TypeScript', 'Plain text', 'Html', 'XML', 'SQL', 'Go', 'Kotlin', 'Lua', 'Markdown', 'PHP', 'Python', 'Shell Session', 'Ruby', ] 2.languageTab 插入代码后,您可以在灰色的代码框内对代码文本进行修改. 由于各浏览器环境的不同, 我们对tab键行为进行统一处理, 您可以通过修改languageTab字段对按下tab \"键入的字符\" 进行修改, 默认为四个全角空格. editor.config.languageTab = ' ' (languageTab字段决定pre内的tab行为) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/08-配置全屏功能.html":{"url":"pages/03-配置菜单/08-配置全屏功能.html","title":"配置全屏功能","keywords":"","body":"配置全屏功能 配置属性 编辑器创建之前, 可以使用 editor.config.showFullScreen = true 来展示全屏功能按钮, 默认是true, 就是不加这个属性默认展示全屏功能按钮 注意：工具栏和编辑器区域分离的时候不支持全屏功能 欢迎使用 wangEditor 编辑器 const E = window.wangEditor const editor = new E('#div1') // 配置全屏功能按钮是否展示 editor.config.showFullScreen = true editor.create() 使用API 我们也提供了API供用户使用（同样不支持工具栏和编辑区域分离的情况）： editor.fullScreen() // 全屏 editor.unFullScreen() // 取消全屏 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/03-配置菜单/09-设置菜单栏提示.html":{"url":"pages/03-配置菜单/09-设置菜单栏提示.html","title":"设置菜单栏提示","keywords":"","body":"设置菜单栏提示 隐藏菜单栏提示 编辑器的菜单栏提示，可以通过 editor.config.showMenuTooltips 配置。 const E = window.wangEditor const editor = new E('#div1') // 隐藏菜单栏提示 editor.config.showMenuTooltips = false editor.create() 设置菜单栏提示为上标还是下标 可以通过editor.config.menuTooltipPosition配置显示上标还是下标。 const E = window.wangEditor const editor = new E('#div1') // 菜单栏提示为上标（默认配置） editor.config.menuTooltipPosition = 'up' // 菜单栏提示为下标 // editor.config.menuTooltipPosition = 'down' // 以上配置二选一 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/04-回调函数/":{"url":"pages/04-回调函数/","title":"回调函数","keywords":"","body":"回调函数 请参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/04-回调函数/01-onchange.html":{"url":"pages/04-回调函数/01-onchange.html","title":"Onchange","keywords":"","body":"onchange 配置 onchange 回调函数 配置 onchange 函数之后，用户操作（鼠标点击、键盘打字等）导致的内容变化之后，会自动触发 onchange 函数执行。 如果需要修改 onchange 触发的延迟时间（ onchange 会在用户无任何操作的 xxx 毫秒之后被触发），可通过 onchangeTimeout 配置。更多信息请见 配置历史记录 const E = window.wangEditor const editor = new E(\"#div1\") // 配置 onchange 回调函数 editor.config.onchange = function (newHtml) { console.log('change 之后最新的 html', newHtml) } // 配置触发 onchange 的时间频率，默认为 200ms editor.config.onchangeTimeout = 500 // 修改为 500ms editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/04-回调函数/02-onfocus和onblur.html":{"url":"pages/04-回调函数/02-onfocus和onblur.html","title":"Onfocus和Onblur","keywords":"","body":"onfocus 和 onblur 编辑区域 focus（聚焦）和 blur（失焦）时触发的回调函数。 const E = window.wangEditor const editor = new E('#div1') editor.config.onblur = function (newHtml) { console.log('onblur', newHtml) // 获取最新的 html 内容 } editor.config.onfocus = function (newHtml) { console.log('onfocus', newHtml) // 获取最新的 html 内容 } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/04-回调函数/04-插入网络图片的回调.html":{"url":"pages/04-回调函数/04-插入网络图片的回调.html","title":"插入网络图片的回调","keywords":"","body":"插入网络图片的回调事件 const E = window.wangEditor const editor = new E('#div1') // 插入网络图片的回调 editor.config.linkImgCallback = function (src,alt,href) { console.log('图片 src ', src) console.log('图片文字说明',alt) console.log('跳转链接',href) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/04-回调函数/05-插入网络视频的回调.html":{"url":"pages/04-回调函数/05-插入网络视频的回调.html","title":"插入网络视频的回调","keywords":"","body":"插入网络视频的回调事件 使用 editor.config.onlineVideoCallback 可以自定义检查插入网络视频后的回调。 const E = window.wangEditor const editor = new E('#div1') // 自定义检查插入视频的回调 editor.config.onlineVideoCallback = function (video) { // 自定义回调内容，内容成功插入后会执行该函数 console.log('插入视频内容', video) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/05-内容校验/":{"url":"pages/05-内容校验/","title":"内容校验","keywords":"","body":"内容校验 请参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/05-内容校验/01-插入链接的校验.html":{"url":"pages/05-内容校验/01-插入链接的校验.html","title":"插入链接的校验","keywords":"","body":"插入链接的校验 使用 editor.config.linkCheck 可以自定义检查插入的链接。 const E = window.wangEditor const editor = new E('#div1') // 自定义检查插入的链接 editor.config.linkCheck = function(text, link) { // 以下情况，请三选一 // 1. 返回 true ，说明检查通过 return true // // 2. 返回一个字符串，说明检查未通过，编辑器会阻止链接插入。会 alert 出错误信息（即返回的字符串） // return '链接有 xxx 错误' // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止链接插入。 // 此处，你可以自定义提示错误信息，自由发挥 } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/05-内容校验/02-插入网络图片的校验.html":{"url":"pages/05-内容校验/02-插入网络图片的校验.html","title":"插入网络图片的校验","keywords":"","body":"插入网络图片的校验 使用 editor.config.linkImgCheck 可以自定义检查插入图片的链接。 const E = window.wangEditor const editor = new E('#div1') // 自定义检查插入图片的链接 // 参数中的imgSrc、alt、href分别代表图片地址、图片文本说明和跳转链接 // 后面两个参数是可选参数 editor.config.linkImgCheck = function(imgSrc,alt,href) { // 以下情况，请三选一 // 1. 返回 true ，说明检查通过 return true // // 2. 返回一个字符串，说明检查未通过，编辑器会阻止图片插入。会 alert 出错误信息（即返回的字符串） // return '图片 src 有 xxx 错误' // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止图片插入。 // 此处，你可以自定义提示错误信息，自由发挥 } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/05-内容校验/03-插入网络视频的校验.html":{"url":"pages/05-内容校验/03-插入网络视频的校验.html","title":"插入网络视频的校验","keywords":"","body":"插入网络视频的校验 使用 editor.config.onlineVideoCheck 可以自定义检查插入网络视频的内容。 const E = window.wangEditor const editor = new E('#div1') // 自定义检查插入视频的链接 editor.config.onlineVideoCheck = function(video)) { // 编辑器会根据返回的内容做校验：比如以下几种情况 // 1. 返回 true ，说明检查通过 return true // 2. 返回一个字符串，说明检查未通过，编辑器会阻止视频插入。会 alert 出错误信息（即返回的字符串） // return '插入的视频 有 xxx 错误' // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止视频插入。 // 此处，你可以自定义提示错误信息，自由发挥 } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/06-粘贴过滤/":{"url":"pages/06-粘贴过滤/","title":"粘贴过滤","keywords":"","body":"粘贴过滤 请参考下级目录的内容。 【注意】本文所有粘贴的配置，都不适用于 IE11 。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/06-粘贴过滤/01-关闭对粘贴内容样式的过滤.html":{"url":"pages/06-粘贴过滤/01-关闭对粘贴内容样式的过滤.html","title":"关闭对粘贴内容样式的过滤","keywords":"","body":"关闭粘贴样式的过滤 【注意】本文不适用于 IE11 从其他地方（如网页、word 等）复制文本到编辑器中，编辑器会默认过滤掉复制文本的样式，这样可以让编辑器内容更加简洁。因为复制过来的文本样式，可能会比较混乱，且不可控。 可通过设置 editor.config.pasteFilterStyle = false 来关闭样式过滤。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/06-粘贴过滤/02-忽略粘贴内容中的图片.html":{"url":"pages/06-粘贴过滤/02-忽略粘贴内容中的图片.html","title":"忽略粘贴内容中的图片","keywords":"","body":"忽略粘贴内容中的图片 【注意】本文不适用于 IE11 从其他页面（如网页、word 等）复制过来的内容，除了包含文字还可能包含图片，这些图片一般都是外域的（可能会有防盗链处理，导致图片不显示）。 可以通过配置 editor.config.pasteIgnoreImg = true 来忽略粘贴的图片。如果复制的内容有图片又有文字，则只粘贴文字，不粘贴图片。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/06-粘贴过滤/03-自定义处理粘贴的文本内容.html":{"url":"pages/06-粘贴过滤/03-自定义处理粘贴的文本内容.html","title":"自定义处理粘贴的文本内容","keywords":"","body":"自定义处理粘贴的文本内容 【注意】本文不适用于 IE11 使用者可通过 editor.config.pasteTextHandle 对粘贴的文本内容进行自定义的过滤、处理等操作，然后返回处理之后的文本内容。编辑器最终会粘贴用户处理之后并且返回的的内容。 const E = window.wangEditor const editor = new E('#div1') // 配置粘贴文本的内容处理 editor.config.pasteTextHandle = function (pasteStr) { // 对粘贴的文本进行处理，然后返回处理后的结果 return pasteStr + '巴拉巴拉' } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/":{"url":"pages/07-上传图片/","title":"上传图片","keywords":"","body":"上传图片 参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/01-配置服务端接口.html":{"url":"pages/07-上传图片/01-配置服务端接口.html","title":"配置服务端接口","keywords":"","body":"配置服务端接口 【注意】如果上传图片遇到问题，请打开浏览器开发者工具，查看 console.error 输出的错误信息。 配置接口 const E = window.wangEditor const editor = new E('#div1') // 配置 server 接口地址 editor.config.uploadImgServer = '/upload-img' editor.create() 配置完成之后，编辑器的图片菜单，会显示上传图片的 tab 和图标，如下图。 server 接口返回格式，重要！！！ 接口要返回 application/json 格式，格式要求如下： { // errno 即错误代码，0 表示没有错误。 // 如果有错误，errno != 0，可通过下文中的监听函数 fail 拿到该错误码进行自定义处理 \"errno\": 0, // data 是一个数组，返回图片Object，Object中包含需要包含url、alt和href三个属性,它们分别代表图片地址、图片文字说明和跳转链接,alt和href属性是可选的，可以不设置或设置为空字符串,需要注意的是url是一定要填的。 \"data\": [ { url: \"图片地址\", alt: \"图片文字说明\", href: \"跳转链接\" }, { url: \"图片地址1\", alt: \"图片文字说明1\", href: \"跳转链接1\" }, \"……\" ] } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/02-限制图片大小和类型.html":{"url":"pages/07-上传图片/02-限制图片大小和类型.html","title":"限制图片大小和类型","keywords":"","body":"限制图片大小和类型 限制大小 默认限制图片大小是 5M ，可以自己修改。 editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 2M 限制类型 可自定义配置，如： editor.config.uploadImgAccept = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'] 系统默认配置为: ['jpg', 'jpeg', 'png', 'gif', 'bmp'] 如果不希望限制类型，可将其设为空数组: editor.config.uploadImgAccept = [] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/03-限制一次最多能传几张图片.html":{"url":"pages/07-上传图片/03-限制一次最多能传几张图片.html","title":"限制一次最多能传几张图片","keywords":"","body":"限制一次最多能传几张图片 默认为 100 张，需要限制可自己配置。 editor.config.uploadImgMaxLength = 5 // 一次最多上传 5 个图片 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/04-自定义上传参数.html":{"url":"pages/07-上传图片/04-自定义上传参数.html","title":"自定义上传参数","keywords":"","body":"自定义上传参数 上传图片时可自定义传递一些参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。 editor.config.uploadImgParams = { token: 'xxxxx', x: 100 } 如果需要将参数拼接到 url 中，可再加上如下配置。 editor.config.uploadImgParamsWithUrl = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/05-自定义filename.html":{"url":"pages/07-上传图片/05-自定义filename.html","title":"自定义Filename","keywords":"","body":"自定义 fileName 上传图片时，可自定义 filename ，即在使用 formData.append(name, file) 添加图片文件时，自定义第一个参数。 editor.config.uploadFileName = 'your-custom-fileName' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/06-自定义header.html":{"url":"pages/07-上传图片/06-自定义header.html","title":"自定义Header","keywords":"","body":"自定义 header 上传图片时添加 http 请求的 header 。 editor.config.uploadImgHeaders = { Accept: 'text/x-json', a: 100, } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/07-withCredentials.html":{"url":"pages/07-上传图片/07-withCredentials.html","title":"WithCredentials","keywords":"","body":"withCredentials（跨域传递 cookie） 跨域上传中如果需要传递 cookie 需设置 withCredentials 。 editor.config.withCredentials = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/08-自定义timeout时间.html":{"url":"pages/07-上传图片/08-自定义timeout时间.html","title":"自定义Timeout时间","keywords":"","body":"自定义 timeout 时间 timeout 即上传接口等待的最大时间，默认是 10 秒钟，可以自己修改。 editor.config.uploadImgTimeout = 5 * 1000 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/09-回调函数.html":{"url":"pages/07-上传图片/09-回调函数.html","title":"回调函数","keywords":"","body":"回调函数 可使用回调函数，对上传图片的不同阶段，做相应处理。代码示例如下。 editor.config.uploadImgHooks = { // 上传图片之前 before: function(xhr) { console.log(xhr) // 可阻止图片上传 return { prevent: true, msg: '需要提示给用户的错误信息' } }, // 图片上传并返回了结果，图片插入已成功 success: function(xhr) { console.log('success', xhr) }, // 图片上传并返回了结果，但图片插入时出错了 fail: function(xhr, editor, resData) { console.log('fail', resData) }, // 上传图片出错，一般为 http 请求的错误 error: function(xhr, editor, resData) { console.log('error', xhr, resData) }, // 上传图片超时 timeout: function(xhr) { console.log('timeout') }, // 图片上传并返回了结果，想要自己把图片插入到编辑器中 // 例如服务器端返回的不是 { errno: 0, data: [...] } 这种格式，可使用 customInsert customInsert: function(insertImgFn, result) { // result 即服务端返回的接口 console.log('customInsert', result) // insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可 insertImgFn(result.data[0]) } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/11-自己实现上传功能.html":{"url":"pages/07-上传图片/11-自己实现上传功能.html","title":"自己实现上传功能","keywords":"","body":"自己实现上传图片 如果想完全自己实现图片上传的过程，如上传图片到某个云服务器，可以使用如下代码。 editor.config.customUploadImg = function (resultFiles, insertImgFn) { // resultFiles 是 input 中选中的文件列表 // insertImgFn 是获取图片 url 后，插入到编辑器的方法 // 上传图片，返回结果，将图片插入到编辑器中 insertImgFn(imgUrl) } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/12-base64保存图片.html":{"url":"pages/07-上传图片/12-base64保存图片.html","title":"Base64保存图片","keywords":"","body":"base64 保存图片 设置 editor.config.uploadImgShowBase64 = true 可使用 base64 格式保存图片。即，可选择本地图片，编辑器用 base64 格式显示图片。 【注意】uploadImgShowBase64（base64 格式）和 uploadImgServer（上传图片到服务器）两者不能同时使用！！！ Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/13-隐藏插入网络图片的功能.html":{"url":"pages/07-上传图片/13-隐藏插入网络图片的功能.html","title":"隐藏插入网络图片的功能","keywords":"","body":"隐藏插入网络图片的功能 设置 editor.config.showLinkImg = false 即可隐藏插入网络图片的功能，即只保留上传本地图片。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/14-网络图片设置alt和跳转链接.html":{"url":"pages/07-上传图片/14-网络图片设置alt和跳转链接.html","title":"网络图片设置Alt和跳转链接","keywords":"","body":"网络图片设置alt和跳转链接 在wangEditor中，插入网络图片功能可以分别设置添加alt属性和跳转链接选项，默认情况下这两个选项是开启的，如果不需要这两个选项，可以参考如下代码： // 配置alt选项 editor.config.showLinkImgAlt = false // 配置超链接 editor.config.showLinkImgHref = false 配置后的效果如下： Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传图片/15-上传至阿里云OSS.html":{"url":"pages/07-上传图片/15-上传至阿里云OSS.html","title":"上传至阿里云OSS","keywords":"","body":"上传至阿里云OSS 利用自己实现上传功能来实现阿里云OSS的上传 首先，安装 OSS 相关工具，然后编写代码： // 具体值需要去阿里云控制台获取 let client = new OSS({ // // region以杭州为例（oss-cn-hangzhou），其他region按实际情况填写。 // region: '', // // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录RAM控制台创建RAM账号。 // accessKeyId: '', // accessKeySecret: '', // bucket: 'Your bucket name', }); editor.config.customUploadImg = function (resultFiles, insertImgFn) { // resultFiles 是 input 中选中的文件列表 // insertImgFn 是获取图片 url 后，插入到编辑器的方法 client.put('myImg', resultFiles[0]) .then(function (res) { // 上传图片，返回结果，将图片插入到编辑器中 insertImgFn(res.url) }).catch(function (err) { console.log(err) }) } 更多配置请参考 阿里云官方文档 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/":{"url":"pages/07-上传视频/","title":"上传视频","keywords":"","body":"上传视频 v4.6.3 开始支持上传视频。 参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/01-配置服务端接口.html":{"url":"pages/07-上传视频/01-配置服务端接口.html","title":"配置服务端接口","keywords":"","body":"配置服务端接口 v4.6.3 开始支持上传视频。 【注意】如果上传视频遇到问题，请打开浏览器开发者工具，查看 console.error 输出的错误信息。 配置接口 const E = window.wangEditor const editor = new E('#div1') // 配置 server 接口地址 editor.config.uploadVideoServer = '/api/upload-video' editor.create() 配置完成之后，编辑器的视频菜单，会显示上传视频的 tab 和图标，如下图。 server 接口返回格式，重要！！！ 接口要返回 application/json 格式，格式要求如下： { // errno 即错误代码，0 表示没有错误。 // 如果有错误，errno != 0，可通过下文中的监听函数 fail 拿到该错误码进行自定义处理 \"errno\": 0, // data 是一个对象，返回视频的线上地址 \"data\": { \"url\": \"视频1地址\", } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/02-限制视频大小和类型.html":{"url":"pages/07-上传视频/02-限制视频大小和类型.html","title":"限制视频大小和类型","keywords":"","body":"限制视频大小和类型 限制大小 默认限制视频大小是 1024m ，可以自己修改。 editor.config.uploadVideoMaxSize = 1 * 1024 * 1024 * 1024 // 1024m 限制类型 editor.config.uploadVideoAccept = ['mp4'] 遇到 413 状态码时如何解决 413 Request Entity Too Large（请求实体太大） 意味着请求体超过了设置的大小（nginx 默认大小1M） 如果服务器使用nginx配置的那么可以参考以下解决办法 1、找到Nginx的配置文件 具体操作可自行百度 2、在http内加入client_max_body_size 10m;（具体大小可自行规定） 如下所示 # 省略 N 行 http { # 省略 N 行 client_max_body_size 100m; # 允许客户端上传文件最大为 100M # 省略 N 行 server { # 省略 N 行 } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/03-自定义上传参数.html":{"url":"pages/07-上传视频/03-自定义上传参数.html","title":"自定义上传参数","keywords":"","body":"自定义上传参数 上传视频时可自定义传递一些参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。 editor.config.uploadVideoParams = { token: 'xxxxx', x: 100 } 如果需要将参数拼接到 url 中，可再加上如下配置。 editor.config.uploadVideoParamsWithUrl = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/04-自定义filename.html":{"url":"pages/07-上传视频/04-自定义filename.html","title":"自定义Filename","keywords":"","body":"自定义 fileName 上传视频时，可自定义 filename ，即在使用 formData.append(name, file) 添加视频文件时，自定义第一个参数。 editor.config.uploadVideoName = 'your-custom-fileName' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/05-自定义header.html":{"url":"pages/07-上传视频/05-自定义header.html","title":"自定义Header","keywords":"","body":"自定义 header 上传视频时添加 http 请求的 header 。 editor.config.uploadVideoHeaders = { Accept: 'text/x-json', a: 100, } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/06-限制一次最多能传几个文件.html":{"url":"pages/07-上传视频/06-限制一次最多能传几个文件.html","title":"限制一次最多能传几个文件","keywords":"","body":"限制一次最多能传几张视频 考虑到文件较大，所以暂时只允许一个视频上传 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/07-withCredentials.html":{"url":"pages/07-上传视频/07-withCredentials.html","title":"WithCredentials","keywords":"","body":"withCredentials（跨域传递 cookie） 跨域上传中如果需要传递 cookie 需设置 withCredentials 。 editor.config.withVideoCredentials = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/08-自定义timeout时间.html":{"url":"pages/07-上传视频/08-自定义timeout时间.html","title":"自定义Timeout时间","keywords":"","body":"自定义 timeout 时间 timeout 即上传接口等待的最大时间，默认是 5分钟，可以自己修改。 editor.config.uploadVideoTimeout = 1000 * 60 * 5 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/09-回调函数.html":{"url":"pages/07-上传视频/09-回调函数.html","title":"回调函数","keywords":"","body":"回调函数 可使用回调函数，对上传视频的不同阶段，做相应处理。代码示例如下。 editor.config.uploadVideoHooks = { // 上传视频之前 before: function(xhr) { console.log(xhr) // 可阻止视频上传 return { prevent: true, msg: '需要提示给用户的错误信息' } }, // 视频上传并返回了结果，视频插入已成功 success: function(xhr) { console.log('success', xhr) }, // 视频上传并返回了结果，但视频插入时出错了 fail: function(xhr, editor, resData) { console.log('fail', resData) }, // 上传视频出错，一般为 http 请求的错误 error: function(xhr, editor, resData) { console.log('error', xhr, resData) }, // 上传视频超时 timeout: function(xhr) { console.log('timeout') }, // 视频上传并返回了结果，想要自己把视频插入到编辑器中 // 例如服务器端返回的不是 { errno: 0, data: { url : '.....'} } 这种格式，可使用 customInsert customInsert: function(insertVideoFn, result) { // result 即服务端返回的接口 console.log('customInsert', result) // insertVideoFn 可把视频插入到编辑器，传入视频 src ，执行函数即可 insertVideoFn(result.data.url) } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/11-自定义上传功能.html":{"url":"pages/07-上传视频/11-自定义上传功能.html","title":"自定义上传功能","keywords":"","body":"自定义上传视频 如果想完全自己实现视频上传的过程，如上传视频到某个云服务器，可以使用如下代码。 editor.config.customUploadVideo = function (resultFiles, insertVideoFn) { // resultFiles 是 input 中选中的文件列表 // insertVideoFn 是获取视频 url 后，插入到编辑器的方法 // 上传视频，返回结果，将视频地址插入到编辑器中 insertVideoFn(videoUrl) } PS：配置自定义插入视频 editor.config.customInsertVideo 也可以在这里起作用。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/13-隐藏插入网络视频的功能.html":{"url":"pages/07-上传视频/13-隐藏插入网络视频的功能.html","title":"隐藏插入网络视频的功能","keywords":"","body":"隐藏插入网络视频的功能 设置 editor.config.showLinkVideo = false 即可隐藏插入网络视频的功能，即只保留上传本地视频。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/14-上传至阿里云OSS.html":{"url":"pages/07-上传视频/14-上传至阿里云OSS.html","title":"上传至阿里云OSS","keywords":"","body":"上传至阿里云OSS 首先，安装 OSS 相关工具，然后编写代码： // 具体值需要去阿里云控制台获取 let client = new OSS({ // // region以杭州为例（oss-cn-hangzhou），其他region按实际情况填写。 // region: '', // // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录RAM控制台创建RAM账号。 // accessKeyId: '', // accessKeySecret: '', // bucket: 'Your bucket name', }); editor.config.customUploadVideo = function (resultFiles, insertVideoFn) { // resultFiles 是 input 中选中的文件列表 // insertVideoFn 是获取视频 url 后，插入到编辑器的方法 client.put('myVideo', resultFiles[0]) .then(function (res) { // 上传视频，返回结果，将视频插入到编辑器中 insertVideoFn(res.url) }).catch(function (err) { console.log(err) }) } 更多配置请参考 阿里云官方文档 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/07-上传视频/15-自定义插入视频.html":{"url":"pages/07-上传视频/15-自定义插入视频.html","title":"自定义插入视频","keywords":"","body":"自定义插入视频 编辑器默认情况下用 插入视频，如下图。 不一定能满足所有人的需求，此时你可以通过 editor.config.customInsertVideo 自定义插入视频的形式。 例如，你需要使用西瓜视频插件，来插入视频，代码如下： // 现在在 html 引入 具体引入方式参考插件官方文档 editor.config.customInsertVideo = function (videoUrl) { // videoUrl 是返回的视频地址 // 往编辑器插入 html 内容 editor.cmd.do( 'insertHTML', ` ` ) // 初始化视频 new Player({ id: 'mse', url: videoUrl }); } editor.cmd.do 可参考 常见 API。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/":{"url":"pages/08-常用API/","title":"常用API","keywords":"","body":"常用 API 参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/01-editor属性.html":{"url":"pages/08-常用API/01-editor属性.html","title":"Editor属性","keywords":"","body":"editor 属性 编辑器唯一的 id editor.id 编辑器的所有配置 editor.config 编辑区域 DOM 节点 editor.$textElem.elems[0] ，元素 id editor.textElemId 菜单栏 DOM 节点 editor.$toolbarElem.elems[0] ，元素 id editor.toolbarElemId Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/02-选区范围API.html":{"url":"pages/08-常用API/02-选区范围API.html","title":"选区范围API","keywords":"","body":"选区范围 API 选中的文字 editor.selection.getSelectionText() 选区所在的 DOM 节点 editor.selection.getSelectionContainerElem().elems[0] 选区开始的 DOM 节点 editor.selection.getSelectionStartElem().elems[0] 选区结束的 DOM 节点 editor.selection.getSelectionEndElem().elems[0] 折叠选区 editor.selection.collapseRange() 判断选区是否为“空”（即没有选中任何文字）editor.selection.isSelectionEmpty() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/03-内容操作API.html":{"url":"pages/08-常用API/03-内容操作API.html","title":"内容操作API","keywords":"","body":"内容操作 API 常规的内容操作参考 内容处理 在光标位置插入文字 editor.cmd.do('insertHTML', '...') 可通过 editor.cmd.do(name, value) 来执行 document.execCommand(name, false, value) 的操作（document.execCommand 是富文本编辑器的基础 API ，文档参考 这里） Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/04-禁用编辑器.html":{"url":"pages/08-常用API/04-禁用编辑器.html","title":"禁用编辑器","keywords":"","body":"禁用编辑器 从 v4.1.0 开始支持 禁用编辑器之后，内容只读，不可编辑。解禁之后，恢复可编辑的能力。 // 创建编辑器 const E = window.wangEditor const editor = new E('#div1') editor.create() // 点击按钮，禁用编辑器 $btn1.click(() => { editor.disable() }) // 点击按钮，解除禁用 $btn2.click(() => { editor.enable() }) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/05-销毁编辑器.html":{"url":"pages/08-常用API/05-销毁编辑器.html","title":"销毁编辑器","keywords":"","body":"销毁编辑器 执行 editor.destroy() 可以销毁编辑器实例。在 Vue2.x 中使用销毁 API ，代码如下。 // 用于 Vue2.x import E from 'wangeditor' export default { data() { return { editor: null } }, mounted() { // 创建编辑器 this.editor = new E(`#demo`) this.editor.create() }, beforeDestroy() { // 销毁编辑器 this.editor.destroy() this.editor = null } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/08-常用API/06-scroll-to-head.html":{"url":"pages/08-常用API/06-scroll-to-head.html","title":"Scroll To Head","keywords":"","body":"scroll-to-head 滚动到某个标题。如下图，可以获取编辑区域的所有标题，可以通过 API 让编辑器滚动到某个标题。 PS：该功能从 v4.5.0 开始支持。 获取所有标题 通过 onCatalogChange 可以实时获取编辑器所有标题，标题变化即可触发该回调函数。 editor.config.onCatalogChange = function (headList) { /* headList 格式 [ { id: \"eold9\", // 标题 id tag: \"H1\", text: \"标题文字\" }, { ... }, { ... } ] */ // 然后自己渲染标题 UI } 滚动某个标题 执行 editor.scrollToHead(headId) 即可。 其中 headId 即上面获取的 id 。 回显内容时 通过 editor.txt.html() 获取的 html 内容，标题也是带着 id 的，格式如下。 标题一 正文 标题二 正文 标题三 正文 在现实这些内容时，可以使用这些 id 来做锚点，实现 scroll to head 的功能。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/09-用于Vue和React/":{"url":"pages/09-用于Vue和React/","title":"用于Vue和React","keywords":"","body":"用于 Vue 和 React 在 Vue 中使用 wangEditor vue3 可参考 wangEditor-with-vue3 vue2 可参考 wangEdior-with-vue 。 在 React 中使用 wangEditor ，可参考 wangEditor-with-react 。 注意，用于 Vue 和 React 可能会需要销毁编辑器，可参考 销毁编辑器。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/10-使用typescript/":{"url":"pages/10-使用typescript/","title":"使用Typescript","keywords":"","body":"使用 typescript wangEditor 可用于 typescript 开发环境，demo 可参考 wangEditor-with-ts 。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/":{"url":"pages/11-自定义扩展菜单/","title":"自定义扩展菜单","keywords":"","body":"自定义扩展菜单 参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/01-快速扩展一个菜单.html":{"url":"pages/11-自定义扩展菜单/01-快速扩展一个菜单.html","title":"快速扩展一个菜单","keywords":"","body":"快速扩展一个菜单 【注意】以 Button 菜单为例演示，下文会提到其他类型的菜单，注册步骤都是一样的。 准备 // 引入 wangEditor import E from 'wangeditor' // npm 安装 // const E = window.wangEditor // CDN 引入的方式 // 获取必要的变量，这些在下文中都会用到 const { $, BtnMenu, DropListMenu, PanelMenu, DropList, Panel, Tooltip } = E // 【注意】如果版本 菜单 class // 第一，菜单 class ，Button 菜单继承 BtnMenu class class AlertMenu extends BtnMenu { constructor(editor) { // data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述 const $elem = E.$( ` alert ` ) super($elem, editor) } // 菜单点击事件 clickHandler() { // 做任何你想做的事情 // 可参考【常用 API】文档，来操作编辑器 alert('hello world') } // 菜单是否被激活（如果不需要，这个函数可以空着） // 1. 激活是什么？光标放在一段加粗、下划线的文本时，菜单栏里的 B 和 U 被激活，如下图 // 2. 什么时候执行这个函数？每次编辑器区域的选区变化（如鼠标操作、键盘操作等），都会触发各个菜单的 tryChangeActive 函数，重新计算菜单的激活状态 tryChangeActive() { // 激活菜单 // 1. 菜单 DOM 节点会增加一个 .w-e-active 的 css class // 2. this.this.isActive === true this.active() // // 取消激活菜单 // // 1. 菜单 DOM 节点会删掉 .w-e-active // // 2. this.this.isActive === false // this.unActive() } } 注册菜单 【注意】 推荐使用全局模式来注册菜单。如果有多个编辑器，每个编辑器的自定义菜单不一样，则使用实例的方式来注册菜单 全局模式 // 菜单 key ，各个菜单不能重复 const menuKey = 'alertMenuKey' // 注册菜单 E.registerMenu(menuKey, AlertMenu) const editor = new E('#div1') editor.create() const editor2 = new E('#div2') editor2.create() 实例模式 // 菜单 key ，各个菜单不能重复 const menuKey = 'alertMenuKey' const menuKey2 = 'alertMenuKey2' const editor = new E('#div1') // 注册菜单 editor.menus.extend(menuKey, AlertMenu) // 将菜单加入到 editor.config.menus 中 const menuKey = 'alertMenuKey' // 也可以通过配置 menus 调整菜单的顺序，参考【配置菜单】部分的文档 editor.config.menus.push(menuKey) editor.config.menus = editor.config.menus.concat(menuKey) // 注册完菜单，再创建编辑器，顺序很重要！！ editor.create() const editor2 = new E('#div2') editor2.menus.extend(menuKey2, AlertMenu) editor2.config.menus.push(menuKey2) editor2.create() ts 中获取 type 再接下来的文档中，参考源码去开发 DropList Panel Tooltip 时，如果你用 ts 开发，可能会用到 wangEditor 内置的一些 type ，可以通过这种方式获取。 注意，wangEditor 版本必须 >= v4.0.6 。 import { DropListConf, DropListItem, PanelTabConf, PanelConf, TooltipConfItemType } from 'wangeditor' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/02-Button菜单.html":{"url":"pages/11-自定义扩展菜单/02-Button菜单.html","title":"Button菜单","keywords":"","body":"Button 菜单 上一节 快速扩展一个菜单 就演示了 Button 菜单。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/03-DropList菜单.html":{"url":"pages/11-自定义扩展菜单/03-DropList菜单.html","title":"DropList菜单","keywords":"","body":"DropList 菜单 DropList 菜单，鼠标 hover 菜单时，显示下拉列表，如下图。 开发一个 DropList 菜单的 class 代码如下。另，注册菜单，和上文过程一样，不再赘述。 // 标题菜单的 class ，可作为 DropList 菜单的参考代码 class Head extends DropListMenu { constructor(editor) { // 菜单栏中，标题菜单的 DOM 元素 // 注意，这里的 $ 不是 jQuery ，是 E.$ （wangEditor 自带的 DOM 操作工具，类似于 jQuery） // data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述 const $elem = $('') // droplist 配置 const dropListConf = { width: 100, title: '设置标题', type: 'list', list: [ { $elem: $('H1'), value: '' }, { $elem: $('H2'), value: '' }, { $elem: $('H3'), value: '' }, { $elem: $('H4'), value: '' }, { $elem: $('H5'), value: '' }, { $elem: $('正文'), value: '' }, ], // droplist 每个 item 的点击事件 clickHandler: (value) => { // value 参数即 dropListConf.list 中配置的 value this.command(value) }, } super($elem, editor, dropListConf) } command(value) { // 设置标题 this.editor.cmd.do('formatBlock', value) } // 菜单是否需要激活 tryChangeActive() { const reg = /^h/i const cmdValue = this.editor.cmd.queryCommandValue('formatBlock') if (reg.test(cmdValue)) { // 选区处于标题内，激活菜单 this.active() } else { // 否则，取消激活 this.unActive() } } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/04-Panel菜单.html":{"url":"pages/11-自定义扩展菜单/04-Panel菜单.html","title":"Panel菜单","keywords":"","body":"Panel 菜单 Panel 菜单，点击菜单时，弹出 panel ，如下图。 开发一个 Panel 菜单，可直接参考视频菜单的源码，比较好理解。看源码过程中需注意： 忽略 typescript 的类型 忽略 index.ts 中的 MenuActive 忽略 create-panel-conf.ts 中的 getRandom 方法，自己定义字符串即可 总之，看主流程，不要被一些不重要的事情所影响 另，注册菜单，和上文过程一样，不再赘述。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/05-自定义tooltip.html":{"url":"pages/11-自定义扩展菜单/05-自定义tooltip.html","title":"自定义Tooltip","keywords":"","body":"自定义 tooltip 在编辑区域可以通过 tooltip 来实现更复杂的操作，例如下图的链接，可以通过 tooltip 来查看链接、删除链接。 要自定义 tooltip ，可以参考链接的 tooltip 源码。代码写完之后，将 index.ts 中的 bindEvent 函数执行即可，但要在 editor.create() 之前执行。 看源码，实现 tooltip 需要用到 editor.txt.eventHooks ，请继续往下看。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/06-编辑区域的事件钩子.html":{"url":"pages/11-自定义扩展菜单/06-编辑区域的事件钩子.html","title":"编辑区域的事件钩子","keywords":"","body":"编辑区域的事件钩子 是什么 想要监听编辑区域的各种事件回调，如鼠标点击、keyup、粘贴、点击图片、点击链接、滚动等，不用自己写。编辑器内都有定义，并开放使用。 // eventHooks 举例 { dropEvents: Function[] clickEvents: Function[] keyupEvents: Function[] tabUpEvents: Function[] // tab 键（keyCode === ）Up 时 tabDownEvents: Function[] // tab 键（keyCode === 9）Down 时 enterUpEvents: Function[] // enter 键（keyCode === 13）up 时 deleteUpEvents: Function[] // 删除键（keyCode === 8）up 时 deleteDownEvents: Function[] // 删除键（keyCode === 8）down 时 pasteEvents: Function[] // 粘贴事件 linkClickEvents: Function[] // 点击链接事件 textScrollEvents: Function[] // 编辑区域滑动事件 toolbarClickEvents: Function[] // 菜单栏被点击 imgClickEvents: Function[] // 图片被点击事件 // 等等…… } 所有 eventHooks 及其内部实现，可以参考源码。 如何使用 使用 eventHooks 非常简单，例如链接的 tooltip 源码中就有使用。定义一个函数，push 到相应的 eventHooks 就可以了。 // function showLinkTooltip() { /* 显示 tooltip */ } // function hideLinkTooltip() { /* 隐藏 tooltip */ } // 点击链接元素是，显示 tooltip editor.txt.eventHooks.linkClickEvents.push(showLinkTooltip) // 点击其他地方，有键盘操作，或者滚动时，隐藏 tooltip editor.txt.eventHooks.clickEvents.push(hideLinkTooltip) editor.txt.eventHooks.keyupEvents.push(hideLinkTooltip) editor.txt.eventHooks.toolbarClickEvents.push(hideLinkTooltip) editor.txt.eventHooks.textScrollEvents.push(hideLinkTooltip) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/11-自定义扩展菜单/07-更多可参考的源码.html":{"url":"pages/11-自定义扩展菜单/07-更多可参考的源码.html","title":"更多可参考的源码","keywords":"","body":"更多可参考的源码 更多菜单的代码，可直接参考 wangEditor 菜单部分的源码 。 再有问题也可加入 QQ 群交流。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/12-多语言/":{"url":"pages/12-多语言/","title":"多语言","keywords":"","body":"多语言 默认情况 wangEditor 是不提供多语言功能的，因为这会增大我们的体积，让我们变得臃肿。 加载 i18next 想要使用多语言功能的小伙伴，首先需要安装 i18next npm i -S i18next 接入 i18next 仅仅是安装了 i18next 还不够，还需要把 i18next 接入到 wangEditor 当中 // js 引入方式 const E = window.wangEditor const editor = new E('#div1') // 引入 i18next 插件 editor.i18next = window.i18next editor.create() 使用 i18next 目前我们仅提供两种翻译: 'zh-CN'(简体中文) 和 'en'(英文) 使用它们也很简单，只需要在创建编辑器前，设置 lang 就可以了 // js 引入方式 const E = window.wangEditor const editor = new E('#div1') // 选择语言 editor.config.lang = 'en' // 引入 i18next 插件 editor.i18next = window.i18next editor.create() 自定义语言 很显然仅仅只是中文和英文是不够的，所以我们提供了可以自定义语言的方法 // js 引入方式 const E = window.wangEditor const editor = new E('#div1') // 选择语言 editor.config.lang = 'japan' // 自定义语言 editor.config.languages['japan'] = { wangEditor: { 请输入正文: '本文を入力してください', } } // 引入 i18next 插件 editor.i18next = window.i18next editor.create() 语言模板 想要自定义语言，需要根据语言模板来，进行翻译才行 { wangEditor: { 插入: 'insert', 默认: 'default', 创建: 'create', 修改: 'edit', 如: 'like', 请输入正文: 'please enter the text', menus: { title: { 标题: '标题', 加粗: '加粗', 字号: '字号', 字体: '字体', 斜体: '斜体', 下划线: '下划线', 删除线: '删除线', 缩进: '缩进', 行高: '行高', 文字颜色: '文字颜色', 背景色: '背景色', 链接: '链接', 序列: '序列', 对齐: '对齐', 引用: '引用', 表情: '表情', 图片: '图片', 视频: '视频', 表格: '表格', 代码: '代码', 分割线: '分割线', 恢复: '恢复', 撤销: '撤销', 全屏: '全屏', 代办事项: '代办事项', }, dropListMenu: { 设置标题: 'title', 背景颜色: 'background', 文字颜色: 'font color', 设置字号: 'font size', 设置字体: 'font family', 设置缩进: 'indent', 对齐方式: 'align', 设置行高: 'line heihgt', 序列: 'list', head: { 正文: 'text', }, indent: { 增加缩进: 'indent', 减少缩进: 'outdent', }, justify: { 靠左: 'left', 居中: 'center', 靠右: 'right', }, list: { 无序列表: 'unordered', 有序列表: 'ordered', }, }, panelMenus: { emoticon: { 默认: 'default', 新浪: 'sina', emoji: 'emoji', 手势: 'gesture', }, image: { 图片链接: 'image link', 上传图片: 'upload image', 网络图片: 'network image', }, link: { 链接: 'link', 链接文字: 'link text', 删除链接: 'delete', 查看链接: 'view', }, video: { 插入视频: 'insert video', }, table: { 行: 'row', 列: 'column', 的: ' ', 表格: 'table', 添加行: 'add row', 删除行: 'delete row', 添加列: 'add column', 删除列: 'delete column', 设置表头: 'set header', 取消表头: 'cancel header', 插入表格: 'insert table', 删除表格: 'delete table', }, code: { 删除代码: 'delete code', 修改代码: 'edit code', 插入代码: 'insert code', }, }, }, validate: { 张图片: 'images', 大于: 'greater than', 图片链接: 'image link', 不是图片: 'is not image', 返回结果: 'return results', 上传图片超时: 'upload image timeout', 上传图片错误: 'upload image error', 上传图片失败: 'upload image failed', 插入图片错误: 'insert image error', 一次最多上传: 'once most at upload', 下载链接失败: 'download link failed', 图片验证未通过: 'image validate failed', 服务器返回状态: 'server return status', 上传图片返回结果错误: 'upload image return results error', 请替换为支持的图片类型: 'please replace with a supported image type', 您插入的网络图片无法识别: 'the network picture you inserted is not recognized', 您刚才插入的图片链接未通过编辑器校验: 'the image link you just inserted did not pass the editor verification', }, } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/13-常见问题/":{"url":"pages/13-常见问题/","title":"常见问题","keywords":"","body":"常见问题 请参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/13-常见问题/01-maxlength.html":{"url":"pages/13-常见问题/01-maxlength.html","title":"Maxlength","keywords":"","body":"max-length wangEditor 暂时无法实现 max-length 功能。 目前业界没有一个富文本 max-length 的统一做法，从产品到技术层面都没有。 max-length 一般用于限制纯文本，用于 。 而富文本编辑器不只能输入纯文本，还有其他很多复杂的格式，例如图片、代码块、表格。 这些非文本内容，在 editor.txt.html() 返回结果中要占据大量的空间。 如果你非得需要一个富文本的 max-length ，那目前只能是通过 onchange 随时检查 editor.txt.text() ，然后判断长度，再对富文本做禁用处理。 不过，这其中可能会发生一些预期之外的问题，到时只能随机应变。 如果你有更好的建议，可以随时给我们提交 issue 。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/13-常见问题/02-xss攻击.html":{"url":"pages/13-常见问题/02-xss攻击.html","title":"Xss攻击","keywords":"","body":"XSS 攻击 富文本编辑器是最容易发生 XSS 攻击的工具之一。 XSS 的攻击方式非常多。简单的方式方案（如替换 为 &lt; &gt;）无法全面解决问题。 因此，我们推荐使用专业的工具 xss 来解决。 const html = editor.txt.html() const safeHtml = xss(html) console.log('处理过 xss 攻击的 html', safeHtml) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "},"pages/13-常见问题/03-查看源码和修改源码.html":{"url":"pages/13-常见问题/03-查看源码和修改源码.html","title":"查看源码和修改源码","keywords":"","body":"查看源码和修改源码 编辑器默认不支持“查看源码”和“修改源码”，但可以自己开发。 因为，使用编辑器的 editor.txt.html 可以 获取/设置 html 源码，有基础能力的支持。 实现的大概过程： 新建一个 ，点击时获取编辑器 html 源码 要实现“查看源码”，则新建一个 显示 html 源码，此时可以临时隐藏编辑器 如果想要高亮源码，可以使用如 highlight.js 之类的第三方插件 要实现“编辑源码”，则新建一个 编辑 html 源码，此时可以临时隐藏编辑器 编辑源码可使用 monaco editor 或者 codemirror 【注意】编辑源码时可能会引发 XSS 攻击 ，注意防护。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:29:15 "}}