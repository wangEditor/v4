{"./":{"url":"./","title":"Introduction","keywords":"","body":"介绍 wangEditor —— 轻量级 web 富文本编辑器，配置方便，使用简单。 官网：www.wangEditor.com 文档：www.wangEditor.com/doc 源码：github.com/wangeditor-team/wangEditor （欢迎 star） （如想继续使用 V3 版本，可参考这里） 基本使用 npm 安装 npm i wangeditor --save ，几行代码即可创建一个编辑器 import E from 'wangeditor' const editor = new E('#div1') editor.create() 交流 加入 QQ 群 164999061（人已满） 710646022 提交 bug 或建议 github issues 提交问题 开发人员 （列出所有开发人员） 王福朋 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:09 "},"pages/01-开始使用/":{"url":"pages/01-开始使用/","title":"01-开始使用","keywords":"","body":"开始使用 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:05:28 "},"pages/01-开始使用/01-基本使用.html":{"url":"pages/01-开始使用/01-基本使用.html","title":"基本使用","keywords":"","body":"基本使用 下载 npm 安装 npm i wangeditor --save CDN 链接 https://unpkg.com/wangeditor/dist/wangEditor.min.js 使用 js 外链引入 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() 使用 npm 安装 import E from 'wangeditor' const editor = new E('#div1') // 或者 const editor = new E( document.getElementById('div1') ) editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 09:57:54 "},"pages/01-开始使用/02-设置高度.html":{"url":"pages/01-开始使用/02-设置高度.html","title":"设置编辑区域的高度","keywords":"","body":"设置编辑区域的高度 编辑区域高度默认为 300px ，可通过以下方式修改。 const editor = new E('#div1') // 设置编辑区域高度为 500px editor.config.height = 500 // 注意，先配置 height ，再执行 create() editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:06:00 "},"pages/01-开始使用/03-菜单和编辑区域分离.html":{"url":"pages/01-开始使用/03-菜单和编辑区域分离.html","title":"菜单和编辑区域分离","keywords":"","body":"菜单和编辑区域分离 如果你想要像 知乎专栏、简书、石墨、网易云笔记 这些编辑页面一样，将编辑区域和菜单分离，也可以实现。 这样，菜单和编辑器区域就是使用者可自己控制的元素，可自定义样式。例如：将菜单fixed、编辑器区域高度自动增加等。 .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container 和 toolbar 分开 ------ 我是分割线 ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // 传入两个元素 editor.create() 从上面代码可以看出，菜单和编辑区域其实就是两个单独的 ，位置、尺寸都可以随便定义。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:19 "},"pages/01-开始使用/04-使用textarea.html":{"url":"pages/01-开始使用/04-使用textarea.html","title":"使用 textarea","keywords":"","body":"使用 textarea wangEditor 从 v3 版本开始不支持 textarea ，但是可以通过 onchange 来实现 textarea 中提交富文本内容。 欢迎使用 wangEditor 富文本编辑器 const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // 第二步，监控变化，同步更新到 textarea $text1.val(html) } editor.create() // 第一步，初始化 textarea 的值 $text1.val(editor.txt.html()) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:03:59 "},"pages/01-开始使用/05-一个页面多个编辑器.html":{"url":"pages/01-开始使用/05-一个页面多个编辑器.html","title":"一个页面多个编辑器","keywords":"","body":"一个页面多个编辑器 wangEditor 支持一个页面创建多个编辑器。 .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } 中间隔离带 第一个 demo（菜单和编辑器区域分开） 第二个 demo（常规） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:04:53 "},"pages/01-开始使用/06-zIndex.html":{"url":"pages/01-开始使用/06-zIndex.html","title":"配置 z-index","keywords":"","body":"配置 z-index 编辑器 z-index 默认为 10000，可以自行调整。 const editor = new E('#div1') editor.config.zIndex = 500 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:18:20 "},"pages/01-开始使用/07-placeholder.html":{"url":"pages/01-开始使用/07-placeholder.html","title":"placeholder","keywords":"","body":"placeholder 可以修改 placeholder 的提示文字。 const editor = new E('#div1') editor.config.placeholder = '自定义 placeholder 提示文字' // editor.config.placeholder = '' // 不想使用 placeholder ，赋值为空字符串即可 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:21:07 "},"pages/01-开始使用/08-使用V3版本.html":{"url":"pages/01-开始使用/08-使用V3版本.html","title":"使用V3版本","keywords":"","body":"使用V3版本 尽量升级使用 V4 版本。平滑升级，成本很低。 V3 版本以后将不再维护， V4 和 V3 的配置和使用极为相似（把 editor.customConfig 改为 editor.config 即可） 如确实没法升级，不得已继续使用 V3，可参考 下载和安装 CDN https://unpkg.com/wangeditor@3.1.1/release/wangEditor.min.js 文件 https://github.com/wangfupeng1988/wangEditor/releases/tag/v3.1.1 npm npm i wangeditor@3.1.1 文档 https://www.kancloud.cn/wangfupeng/wangeditor3/332599 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 09:38:21 "},"pages/02-内容处理/":{"url":"pages/02-内容处理/","title":"02-内容处理","keywords":"","body":"内容处理 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:06:46 "},"pages/02-内容处理/01-设置内容.html":{"url":"pages/02-内容处理/01-设置内容.html","title":"设置内容","keywords":"","body":"设置内容 以下方式中，如果条件允许，尽量使用第一种方式，效率最高。 html 初始化内容 直接将内容写到要创建编辑器的 标签中。 初始化的内容 初始化的内容 const E = window.wangEditor const editor = new E('#div1') editor.create() js 设置内容 创建编辑器之后，使用 editor.txt.html(...) 设置编辑器内容。 const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('用 JS 设置的内容') // 重新设置编辑器内容 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:09:08 "},"pages/02-内容处理/02-追加新内容.html":{"url":"pages/02-内容处理/02-追加新内容.html","title":"追加新内容","keywords":"","body":"追加新内容 创建编辑器之后，可使用 editor.txt.append('追加的内容') 继续追加内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:09:47 "},"pages/02-内容处理/03-获取html.html":{"url":"pages/02-内容处理/03-获取html.html","title":"获取 html","keywords":"","body":"获取 html 使用 editor.txt.html() 获取 html 。 需要注意的是：从编辑器中获取的 html 代码是不包含任何样式的纯 html，如果显示的时候需要对其中的 等标签进行自定义样式（这样既可实现多皮肤功能），下面提供了编辑器中使用的样式供参考。 /* table 样式 */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote 样式 */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code 样式 */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol 样式 */ ul, ol { margin: 10px 0 10px 20px; } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:10:34 "},"pages/02-内容处理/04-获取text.html":{"url":"pages/02-内容处理/04-获取text.html","title":"获取 text","keywords":"","body":"获取 text 使用 editor.txt.text() 获取 text 文本。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:11:13 "},"pages/02-内容处理/05-获取JSON.html":{"url":"pages/02-内容处理/05-获取JSON.html","title":"获取 JSON","keywords":"","body":"获取 JSON 使用 editor.txt.getJSON() 获取 JSON 格式的内容。格式如 [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"欢迎使用 \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \" 富文本编辑器\" ] }, { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ], \"children\": [] }, ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:11:41 "},"pages/02-内容处理/06-清空内容.html":{"url":"pages/02-内容处理/06-清空内容.html","title":"清空内容","keywords":"","body":"清空内容 可使用 editor.txt.clear() 清空编辑器内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:12:00 "},"pages/03-配置菜单/":{"url":"pages/03-配置菜单/","title":"03-配置菜单","keywords":"","body":"配置菜单 请查看下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:13:10 "},"pages/03-配置菜单/01-自定义菜单.html":{"url":"pages/03-配置菜单/01-自定义菜单.html","title":"自定义菜单","keywords":"","body":"自定义菜单 配置菜单 编辑器创建之前，可使用 editor.config.menus 定义显示哪些菜单和菜单的顺序。 欢迎使用 wangEditor 编辑器 const E = window.wangEditor const editor = new E('#div1') // 配置菜单栏，删减菜单，调整顺序 editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() 所有菜单 默认情况下会显示所有的菜单，配置如下： // 默认情况下，显示所有菜单 editor.config.menus = [ 'head', 'bold', 'customFontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'indent', 'lineHeight', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'video', 'table', 'code', 'undo', 'redo', ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:14:42 "},"pages/03-配置菜单/02-配置颜色.html":{"url":"pages/03-配置菜单/02-配置颜色.html","title":"配置颜色","keywords":"","body":"配置颜色 编辑器的字体颜色和背景色，可以通过 editor.config.colors 自定义配置 const E = window.wangEditor const editor = new E('#div1') // 配置颜色（文字颜色、背景色） editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:15:59 "},"pages/03-配置菜单/03-配置字体.html":{"url":"pages/03-配置菜单/03-配置字体.html","title":"配置字体","keywords":"","body":"配置字体 编辑器的字体，可以通过 editor.config.fontNames 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置字体 editor.config.fontNames = [ '黑体', '仿宋', '楷体', '标楷体', '华文仿宋', '华文楷体', '宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:16:22 "},"pages/03-配置菜单/04-配置字号.html":{"url":"pages/03-配置菜单/04-配置字号.html","title":"配置字号","keywords":"","body":"配置字号 编辑器的字号，可以通过 editor.config.customFontSize 配置。 const E = window.wangEditor const editor = new E('#div1') editor.config.customFontSize = [ { value: '9px', text: '9' }, { value: '10px', text: '10' }, { value: '12px', text: '12' }, { value: '14px', text: '14' }, { value: '16px', text: '16' }, { value: '20px', text: '20' }, { value: '42px', text: '42' }, { value: '72px', text: '72' }, ] editor.create() 【注意】上述配置对应的菜单 key 是 customFontSize ，而不是 fontSize 。fontSize 是不支持可配置的。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:22:22 "},"pages/03-配置菜单/05-配置行高.html":{"url":"pages/03-配置菜单/05-配置行高.html","title":"配置行高","keywords":"","body":"配置行高 编辑器的行高，可以通过 editor.config.lineHeights 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置行高 editor.config.lineHeights = ['1', '1.15', '1.6', '2', '2.5', '3'] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:22:39 "},"pages/03-配置菜单/06-配置表情图标.html":{"url":"pages/03-配置菜单/06-配置表情图标.html","title":"配置表情图标","keywords":"","body":"配置表情图标 通过 editor.config.emotions 可配置表情图标。表情菜单的 panel 中，支持多 tab 。 const SINA_URL_PATH = 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal' const E = window.wangEditor const editor = new E('#div1') editor.config.emotions = [ { title: '新浪', // tab 的标题 type: 'image', // 'emoji' 或 'image' ，即 emoji 形式或者图片形式 content: [ { alt: '[坏笑]', src: `${SINA_URL_PATH}/50/pcmoren_huaixiao_org.png` }, { alt: '[舔屏]', src: `${SINA_URL_PATH}/40/pcmoren_tian_org.png` }, { alt: '[污]', src: `${SINA_URL_PATH}/3c/pcmoren_wu_org.png` }, ] }, { title: 'emoji', // tab 的标题 type: 'emoji', // 'emoji' / 'image' // emoji 表情，content 是一个数组即可 content: '&#x1F600; &#x1F603; &#x1F604; &#x1F601; &#x1F606; &#x1F605; &#x1F602; &#x1F60A; &#x1F607; &#x1F642; &#x1F643; &#x1F609; &#x1F613; &#x1F62A; &#x1F634; &#x1F644; &#x1F914; &#x1F62C; &#x1F910;'.split(/\\s/), } ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:30:26 "},"pages/03-配置菜单/07-代码高亮.html":{"url":"pages/03-配置菜单/07-代码高亮.html","title":"代码高亮","keywords":"","body":"代码高亮 wangEditoor中的\"插入代码\"菜单模块, 支持通过引入 highlight js 插件实现代码高亮的样式功能.并且提供多种样式支持. 编辑器默认不带有 highlight, 您需要手动安装高亮插件. highlight js官网: https://highlightjs.org 安装 highlight npm 方式 npm install highlight.js -S CDN 引入 挂载 highlight 1.获取highlight实例 import hljs from 'highlight.js' (cdn引入,highlight 实例 \"hljs\"会声明到window下, 直接调用即可) 挂载设置代码如下 const E = window.wangEditor const editor = new E('#div1') // 挂载highlight插件 editor.highlight = hljs editor.create() 2.css的引入 npm方式 import 'highlight.js/styles/monokai_sublime.css' CDN引入 完成以上所有步骤之后, 再次使用wangEditor中的 插入代码 功能, 就能够有高亮效果了, 如图所示 显示内容 当您在读取文本数据作展示时, 需要使用highlight重新渲染 1.首先您需要在文本展示页面安装highlight插件 (安装方式与富文本页面引入highlight相同,不再赘述) 2.获取的到highlight的实例后, 使用其全局渲染方法, 对代码文本进行渲染, 即可实现高亮显示. hljs.initHighlightingOnLoad(); 更多highlight使用方法, 请参考highlight.js官方手册 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:27 "},"pages/04-回调函数/":{"url":"pages/04-回调函数/","title":"04-回调函数","keywords":"","body":"回调函数 请参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:40:07 "},"pages/04-回调函数/01-onchange.html":{"url":"pages/04-回调函数/01-onchange.html","title":"onchange","keywords":"","body":"onchange 配置 onchange 回调函数 配置 onchange 函数之后，用户操作（鼠标点击、键盘打字等）导致的内容变化之后，会自动触发 onchange 函数执行。 如果需要修改 onchange 触发的延迟时间（ onchange 会在用户无任何操作的 xxx 毫秒之后被触发），可通过 onchangeTimeout 配置。 const E = window.wangEditor const editor = new E('#div1') // 配置 onchange 回调函数 editor.config.onchange = function (newHtml) { console.log('change 之后最新的 html', newHtml) } // 配置触发 onchange 的时间频率，默认为 200ms editor.config.onchangeTimeout = 500 // 修改为 500ms editor.create() 有些情况无法触发 onchange 事件 如用户自己用 js 修改了 DOM 节点的内容，没有通过编辑器修改内容，则不会触发编辑器的 onchange 。 此时可以主动执行 editor.change() 来触发 onchange 回调函数。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:40:30 "},"pages/04-回调函数/02-onfocus和onblur.html":{"url":"pages/04-回调函数/02-onfocus和onblur.html","title":"onfocus 和 onblur","keywords":"","body":"onfocus 和 onblur 编辑区域 focus（聚焦）和 blur（失焦）时触发的回调函数。 const E = window.wangEditor const editor = new E('#div1') editor.config.onblur = function (newHtml) { console.log('onblur', newHtml) // 获取最新的 html 内容 } editor.config.onfocus = function (newHtml) { console.log('onfocus', newHtml) // 获取最新的 html 内容 } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:41:34 "},"pages/04-回调函数/04-插入网络图片的回调.html":{"url":"pages/04-回调函数/04-插入网络图片的回调.html","title":"插入网络图片的回调事件","keywords":"","body":"插入网络图片的回调事件 const E = window.wangEditor const editor = new E('#div1') // 插入网络图片的回调 editor.config.linkImgCallback = function (src) { console.log('图片 src ', src) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:41:40 "},"pages/05-内容校验/":{"url":"pages/05-内容校验/","title":"05-内容校验","keywords":"","body":"内容校验 请参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:42:50 "},"pages/05-内容校验/01-插入链接的校验.html":{"url":"pages/05-内容校验/01-插入链接的校验.html","title":"插入链接的校验","keywords":"","body":"插入链接的校验 待补充…… Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:43:23 "},"pages/05-内容校验/02-插入网络图片的校验.html":{"url":"pages/05-内容校验/02-插入网络图片的校验.html","title":"插入网络图片的校验","keywords":"","body":"插入网络图片的校验 待补充…… Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:43:41 "},"pages/06-粘贴过滤/":{"url":"pages/06-粘贴过滤/","title":"06-粘贴过滤","keywords":"","body":"粘贴过滤 请参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:44:21 "},"pages/06-粘贴过滤/01-关闭对粘贴内容样式的过滤.html":{"url":"pages/06-粘贴过滤/01-关闭对粘贴内容样式的过滤.html","title":"关闭粘贴样式的过滤","keywords":"","body":"关闭粘贴样式的过滤 从其他地方（如网页、word 等）复制文本到编辑器中，编辑器会默认过滤掉复制文本的样式，这样可以让编辑器内容更加简洁。因为复制过来的文本样式，可能会比较混乱，且不可控。 可通过设置 editor.config.pasteFilterStyle = false 来关闭样式过滤。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:45:14 "},"pages/06-粘贴过滤/02-忽略粘贴内容中的图片.html":{"url":"pages/06-粘贴过滤/02-忽略粘贴内容中的图片.html","title":"忽略粘贴内容中的图片","keywords":"","body":"忽略粘贴内容中的图片 从其他页面（如网页、word 等）复制过来的内容，除了包含文字还可能包含图片，这些图片一般都是外域的（可能会有防盗链处理，导致图片不显示）。 可以通过配置 editor.config.pasteIgnoreImg = true 来忽略粘贴的图片。如果复制的内容有图又文，则只粘贴文字，不粘贴图片。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:45:49 "},"pages/06-粘贴过滤/03-自定义处理粘贴的文本内容.html":{"url":"pages/06-粘贴过滤/03-自定义处理粘贴的文本内容.html","title":"自定义处理粘贴的文本内容","keywords":"","body":"自定义处理粘贴的文本内容 使用者可通过 editor.config.pasteTextHandle 对粘贴的文本内容进行自定义的过滤、处理等操作，然后返回处理之后的文本内容。编辑器最终会粘贴用户处理之后并且返回的的内容。 const E = window.wangEditor const editor = new E('#div1') // 配置粘贴文本的内容处理 editor.config.pasteTextHandle = function (pasteStr) { // 对粘贴的文本进行处理，然后返回处理后的结果 return pasteStr + '巴拉巴拉' } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:46:07 "},"pages/07-上传图片/":{"url":"pages/07-上传图片/","title":"07-上传图片","keywords":"","body":"上传图片 参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:46:56 "},"pages/07-上传图片/01-配置服务端接口.html":{"url":"pages/07-上传图片/01-配置服务端接口.html","title":"配置服务端接口","keywords":"","body":"配置服务端接口 【注意】如果上传图片遇到问题，请打开浏览器开发者工具，查看 console.error 输出的错误信息。 配置接口 const E = window.wangEditor const editor = new E('#div1') // 配置 server 接口地址 editor.config.uploadImgServer = '/upload-img' editor.create() 配置完成之后，编辑器的图片菜单，会显示上传图片的 tab 和图标，如下图。 server 接口返回格式，重要！！！ 接口要返回 application/json 格式，格式要求如下： { // errno 即错误代码，0 表示没有错误。 // 如果有错误，errno != 0，可通过下文中的监听函数 fail 拿到该错误码进行自定义处理 \"errno\": 0, // data 是一个数组，返回图片的线上地址 \"data\": [ \"图片1地址\", \"图片2地址\", \"……\" ] } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:31 "},"pages/07-上传图片/02-限制图片大小.html":{"url":"pages/07-上传图片/02-限制图片大小.html","title":"限制图片大小","keywords":"","body":"限制图片大小 默认限制图片大小是 5M ，可以自己修改。 editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 2M Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:50:47 "},"pages/07-上传图片/03-限制一次最多能传几张图片.html":{"url":"pages/07-上传图片/03-限制一次最多能传几张图片.html","title":"限制一次最多能传几张图片","keywords":"","body":"限制一次最多能传几张图片 默认为 100 张，需要限制可自己配置。 editor.config.uploadImgMaxLength = 5 // 一次最多上传 5 个图片 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:51:04 "},"pages/07-上传图片/04-自定义上传参数.html":{"url":"pages/07-上传图片/04-自定义上传参数.html","title":"自定义上传参数","keywords":"","body":"自定义上传参数 上传图片时可自定义传递一些参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。 editor.config.uploadImgParams = { token: 'xxxxx', x: 100 } 如果需要将参数拼接到 url 中，可再加上如下配置。 editor.customConfig.uploadImgParamsWithUrl = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:51:21 "},"pages/07-上传图片/05-自定义filename.html":{"url":"pages/07-上传图片/05-自定义filename.html","title":"自定义 fileName","keywords":"","body":"自定义 fileName 上传图片时，可自定义 filename ，即在使用 formData.append(name, file) 添加图片文件时，自定义第一个参数。 editor.config.uploadFileName = 'your-custom-fileName' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 09:40:25 "},"pages/07-上传图片/06-自定义header.html":{"url":"pages/07-上传图片/06-自定义header.html","title":"自定义 header","keywords":"","body":"自定义 header 上传图片时添加 http 请求的 header 。 editor.config.uploadImgHeaders = { Accept: 'text/x-json', a: 100, } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 09:40:27 "},"pages/07-上传图片/07-withCredentials.html":{"url":"pages/07-上传图片/07-withCredentials.html","title":"withCredentials（跨域传递 cookie）","keywords":"","body":"withCredentials（跨域传递 cookie） 跨域上传中如果需要传递 cookie 需设置 withCredentials 。 editor.config.withCredentials = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:52:06 "},"pages/07-上传图片/08-自定义timeout时间.html":{"url":"pages/07-上传图片/08-自定义timeout时间.html","title":"自定义 timeout 时间","keywords":"","body":"自定义 timeout 时间 timeout 即上传接口等待的最大时间，默认是 10 秒钟，可以自己修改。 editor.config.uploadImgTimeout = 5 * 1000 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:52:25 "},"pages/07-上传图片/09-回调函数.html":{"url":"pages/07-上传图片/09-回调函数.html","title":"回调函数","keywords":"","body":"回调函数 可使用回调函数，对上传图片的不同阶段，做相应处理。代码示例如下。 editor.config.uploadImgHooks = { // 上传图片之前 before(xhr) { console.log(xhr) // 可阻止图片上传 return { prevent: true, msg: '需要提示给用户的错误信息' } } // 图片上传并返回了结果，图片插入已成功 success(xhr) { console.log('success', xhr) } // 图片上传并返回了结果，但图片插入时出错了 fail(xhr, editor, resData) { console.log('fail', resData) } // 上传图片出错，一般为 http 请求的错误 error(xhr, editor, resData) { console.log('error', xhr, resData) } // 上传图片超时 timeout(xhr) { console.log('timeout') } // 图片上传并返回了结果，想要自己把图片插入到编辑器中 // 例如服务器端返回的不是 { errno: 0, data: [...] } 这种格式，可使用 customInsert customInsert(insertImgFn, result) { // result 即服务端返回的接口 console.log('customInsert', result) // insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可 insertImgFn(result.data[0]) } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:52:47 "},"pages/07-上传图片/10-自定义alert.html":{"url":"pages/07-上传图片/10-自定义alert.html","title":"自定义 alert","keywords":"","body":"自定义 alert 上传图片的错误提示默认使用 alert 弹出，你也可以自定义用户体验更好的提示方式。 editor.config.customAlert = function (s) { console.log('customAlert: ' + s) } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:53:10 "},"pages/07-上传图片/11-自己实现上传功能.html":{"url":"pages/07-上传图片/11-自己实现上传功能.html","title":"自己实现上传图片","keywords":"","body":"自己实现上传图片 如果想完全自己实现图片上传的过程，如上传图片到某个云服务器，可以使用如下代码。 editor.config.customUploadImg = function (resultFiles, insertImgFn) { // resultFiles 是 input 中选中的文件列表 // insertImgFn 是获取图片 url 后，插入到编辑器的方法 // 上传图片，返回结果，将图片插入到编辑器中 insertImgFn(imgUrl) } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:53:39 "},"pages/07-上传图片/12-base64保存图片.html":{"url":"pages/07-上传图片/12-base64保存图片.html","title":"base64 保存图片","keywords":"","body":"base64 保存图片 设置 editor.config.uploadImgShowBase64 = true 可使用 base64 格式保存图片。即，可选择本地图片，编辑器用 base64 格式显示图片。 【注意】uploadImgShowBase64（base64 格式）和 uploadImgServer（上传图片到服务器）两者不能同时使用！！！ Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:34 "},"pages/07-上传图片/13-隐藏插入网络图片的功能.html":{"url":"pages/07-上传图片/13-隐藏插入网络图片的功能.html","title":"隐藏插入网络图片的功能","keywords":"","body":"隐藏插入网络图片的功能 设置 editor.config.showLinkImg = false 即可隐藏插入网络图片的功能，即只保留上传本地图片。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:54:17 "},"pages/08-常用API/":{"url":"pages/08-常用API/","title":"08-常用API","keywords":"","body":"常用 API 参考下级目录的内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:55:30 "},"pages/08-常用API/01-editor属性.html":{"url":"pages/08-常用API/01-editor属性.html","title":"editor 属性","keywords":"","body":"editor 属性 编辑器唯一的 id editor.id 编辑器的所有配置 editor.config 编辑区域 DOM 节点 editor.$textElem.elems[0] ，元素 id editor.textElemId 菜单栏 DOM 节点 editor.$toolbarElem.elems[0] ，元素 id editor.toolbarElemId Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:56:20 "},"pages/08-常用API/02-选区范围API.html":{"url":"pages/08-常用API/02-选区范围API.html","title":"选区范围 API","keywords":"","body":"选区范围 API 选中的文字 editor.selection.getSelectionText() 选区所在的 DOM 节点 editor.selection.getSelectionContainerElem().elems[0] 选区开始的 DOM 节点 editor.selection.getSelectionStartElem().elems[0] 选区结束的 DOM 节点 editor.selection.getSelectionEndElem().elems[0] 折叠选区 editor.selection.collapseRange() 判断选区是否为“空”（即没有选中任何文字）editor.selection.isSelectionEmpty() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:56:47 "},"pages/08-常用API/03-内容操作API.html":{"url":"pages/08-常用API/03-内容操作API.html","title":"内容操作 API","keywords":"","body":"内容操作 API 常规的内容操作参考 内容处理 在光标位置插入文字 editor.cmd.do('insertHTML', '...') 可通过 editor.cmd.do(name, value) 来执行 document.execCommand(name, false, value) 的操作（document.execCommand 是富文本编辑器的基础 API ，文档参考 这里） Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:57:29 "},"pages/08-常用API/04-禁用编辑器.html":{"url":"pages/08-常用API/04-禁用编辑器.html","title":"禁用编辑器","keywords":"","body":"禁用编辑器 // 禁用编辑功能 editor.$textElem.attr('contenteditable', false) // 开启编辑功能 editor.$textElem.attr('contenteditable', true) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:58:05 "},"pages/08-常用API/05-销毁编辑器.html":{"url":"pages/08-常用API/05-销毁编辑器.html","title":"销毁编辑器","keywords":"","body":"销毁编辑器 待补充…… Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 10:58:24 "},"pages/09-用于Vue和React/":{"url":"pages/09-用于Vue和React/","title":"09-用于Vue和React","keywords":"","body":"用于 Vue 和 React 待补充…… 注意： 演示销毁 API npm 安装包，要更新到正式的 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:13:53 "},"pages/10-使用typescript/":{"url":"pages/10-使用typescript/","title":"10-使用typescript","keywords":"","body":"使用 typescript 待补充…… Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:00:30 "},"pages/11-自定义扩展菜单/":{"url":"pages/11-自定义扩展菜单/","title":"11-自定义扩展菜单","keywords":"","body":"自定义扩展菜单 参考下级目录内容。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:04:08 "},"pages/11-自定义扩展菜单/01-快速扩展一个菜单.html":{"url":"pages/11-自定义扩展菜单/01-快速扩展一个菜单.html","title":"快速扩展一个菜单","keywords":"","body":"快速扩展一个菜单 【注意】以 Button 菜单为例演示，下文会提到其他类型的菜单，注册步骤都是一样的。 准备 // 引入 wangEditor import E from 'wangeditor' // npm 安装 // const E = window.wangEditor // CDN 引入的方式 // 获取必要的变量，这些在下文中都会用到 const { $ } = E const { BtnMenu, DropListMenu, PanelMenu, DropList, Panel, Tooltip } = E.menuConstructors 菜单 class // 第一，菜单 class ，Button 菜单继承 BtnMenu class class AlertMenu extends BtnMenu { constructor(editor) { const $elem = E.$( ` alert ` ) super($elem, editor) } // 菜单点击事件 clickHandler() { // 做任何你想做的事情 // 可参考【常用 API】文档，来操作编辑器 alert('hello world') } // 菜单是否被激活（如果不需要，这个函数可以空着） // 1. 激活是什么？光标放在一段加粗、下划线的文本时，菜单栏里的 B 和 U 被激活，如下图 // 2. 什么时候执行这个函数？每次编辑器区域的选区变化（如鼠标操作、键盘操作等），都会触发各个菜单的 tryChangeActive 函数，重新计算菜单的激活状态 tryChangeActive() { // 激活菜单 // 1. 菜单 DOM 节点会增加一个 .w-e-active 的 css class // 2. this.this.isActive === true this.active() // // 取消激活菜单 // // 1. 菜单 DOM 节点会删掉 .w-e-active // // 2. this.this.isActive === false // this.unActive() } } 注册菜单 const editor = new E('#div1') // 注册菜单 const menuKey = 'alertMenuKey' // 菜单 key ，各个菜单不能重复 editor.menus.extend('alertMenuKey', AlertMenu) // 将菜单加入到 editor.config.menus 中 // 也可以通过配置 menus 调整菜单的顺序，参考【配置菜单】部分的文档 editor.config.menus = editor.config.menus.concat(menuKey) // 注册完菜单，再创建编辑器，顺序很重要！！！ editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:41 "},"pages/11-自定义扩展菜单/02-Button菜单.html":{"url":"pages/11-自定义扩展菜单/02-Button菜单.html","title":"Button 菜单","keywords":"","body":"Button 菜单 上一节 快速扩展一个菜单 就演示了 Button 菜单。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:07:27 "},"pages/11-自定义扩展菜单/03-DropList菜单.html":{"url":"pages/11-自定义扩展菜单/03-DropList菜单.html","title":"DropList 菜单","keywords":"","body":"DropList 菜单 DropList 菜单，鼠标 hover 菜单时，显示下拉列表，如下图。 开发一个 DropList 菜单的 class 代码如下。另，注册菜单，和上文过程一样，不再赘述。 // 标题菜单的 class ，可作为 DropList 菜单的参考代码 class Head extends DropListMenu { constructor(editor) { // 菜单栏中，标题菜单的 DOM 元素 // 注意，这里的 $ 不是 jQuery ，是 E.$ （wangEditor 自带的 DOM 操作工具，类似于 jQuery） const $elem = $('') // droplist 配置 const dropListConf = { width: 100, title: '设置标题', type: 'list', list: [ { $elem: $('H1'), value: '' }, { $elem: $('H2'), value: '' }, { $elem: $('H3'), value: '' }, { $elem: $('H4'), value: '' }, { $elem: $('H5'), value: '' }, { $elem: $('正文'), value: '' }, ], // droplist 每个 item 的点击事件 clickHandler: (value) => { // value 参数即 dropListConf.list 中配置的 value this.command(value) }, } super($elem, editor, dropListConf) } command(value) { // 设置标题 this.editor.cmd.do('formatBlock', value) } // 菜单是否需要激活 tryChangeActive() { const reg = /^h/i const cmdValue = this.editor.cmd.queryCommandValue('formatBlock') if (reg.test(cmdValue)) { // 选区处于标题内，激活菜单 this.active() } else { // 否则，取消激活 this.unActive() } } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:46 "},"pages/11-自定义扩展菜单/04-Panel菜单.html":{"url":"pages/11-自定义扩展菜单/04-Panel菜单.html","title":"Panel 菜单","keywords":"","body":"Panel 菜单 Panel 菜单，点击菜单时，弹出 panel ，如下图。 开发一个 Panel 菜单，可直接参考视频菜单的源码，比较好理解。看源码过程中需注意： 忽略 typescript 的类型 忽略 index.ts 中的 MenuActive 忽略 create-panel-conf.ts 中的 getRandom 方法，自己定义字符串即可 总之，看主流程，不要被一些不重要的事情所影响 另，注册菜单，和上文过程一样，不再赘述。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:51 "},"pages/11-自定义扩展菜单/05-自定义tooltip.html":{"url":"pages/11-自定义扩展菜单/05-自定义tooltip.html","title":"自定义 tooltip","keywords":"","body":"自定义 tooltip 在编辑区域可以通过 tooltip 来实现更复杂的操作，例如下图的链接，可以通过 tooltip 来查看链接、删除链接。 要自定义 tooltip ，可以参考链接的 tooltip 源码。代码写完之后，将 index.ts 中的 bindEvent 函数执行即可，但要在 editor.create() 之前执行。 看源码，实现 tooltip 需要用到 editor.txt.eventHooks ，请继续往下看。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-26 10:12:55 "},"pages/11-自定义扩展菜单/06-编辑区域的事件钩子.html":{"url":"pages/11-自定义扩展菜单/06-编辑区域的事件钩子.html","title":"编辑区域的事件钩子","keywords":"","body":"编辑区域的事件钩子 是什么 想要监听编辑区域的各种事件回调，如鼠标点击、keyup、粘贴、点击图片、点击链接、滚动等，不用自己写。编辑器内都有定义，并开放使用。 // eventHooks 举例 { dropEvents: Function[] clickEvents: Function[] keyupEvents: Function[] tabUpEvents: Function[] // tab 键（keyCode === ）Up 时 tabDownEvents: Function[] // tab 键（keyCode === 9）Down 时 enterUpEvents: Function[] // enter 键（keyCode === 13）up 时 deleteUpEvents: Function[] // 删除键（keyCode === 8）up 时 deleteDownEvents: Function[] // 删除键（keyCode === 8）down 时 pasteEvents: Function[] // 粘贴事件 linkClickEvents: Function[] // 点击链接事件 textScrollEvents: Function[] // 编辑区域滑动事件 toolbarClickEvents: Function[] // 菜单栏被点击 imgClickEvents: Function[] // 图片被点击事件 // 等等…… } 所有 eventHooks 及其内部实现，可以参考源码。 如何使用 使用 eventHooks 非常简单，例如链接的 tooltip 源码中就有使用。定义一个函数，push 到相应的 eventHooks 就可以了。 // function showLinkTooltip() { /* 显示 tooltip */ } // function hideLinkTooltip() { /* 隐藏 tooltip */ } // 点击链接元素是，显示 tooltip editor.txt.eventHooks.linkClickEvents.push(showLinkTooltip) // 点击其他地方，有键盘操作，或者滚动时，隐藏 tooltip editor.txt.eventHooks.clickEvents.push(hideLinkTooltip) editor.txt.eventHooks.keyupEvents.push(hideLinkTooltip) editor.txt.eventHooks.toolbarClickEvents.push(hideLinkTooltip) editor.txt.eventHooks.textScrollEvents.push(hideLinkTooltip) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:10:38 "},"pages/11-自定义扩展菜单/07-更多可参考的源码.html":{"url":"pages/11-自定义扩展菜单/07-更多可参考的源码.html","title":"更多可参考的源码","keywords":"","body":"更多可参考的源码 更多菜单的代码，可直接参考 wangEditor 菜单部分的源码 。 再有问题也可加入 QQ 群交流。 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:11:41 "},"pages/12-多语言/":{"url":"pages/12-多语言/","title":"12-多语言","keywords":"","body":"多语言 待补充…… Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-08-25 11:12:34 "}}